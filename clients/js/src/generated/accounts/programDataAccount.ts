/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { findProgramDataAccountPda } from '../pdas';
import {
  Key,
  getKeyDecoder,
  getKeyEncoder,
  getProgramDataDecoder,
  getProgramDataEncoder,
  type ProgramData,
  type ProgramDataArgs,
} from '../types';

export const PROGRAM_DATA_ACCOUNT_KEY = Key.ProgramDataAccount;

export function getProgramDataAccountKeyBytes() {
  return getKeyEncoder().encode(PROGRAM_DATA_ACCOUNT_KEY);
}

export type ProgramDataAccount = {
  key: Key;
  authority: Address;
  data: ProgramData;
};

export type ProgramDataAccountArgs = {
  authority: Address;
  data: ProgramDataArgs;
};

export function getProgramDataAccountEncoder(): Encoder<ProgramDataAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['authority', getAddressEncoder()],
      ['data', getProgramDataEncoder()],
    ]),
    (value) => ({ ...value, key: PROGRAM_DATA_ACCOUNT_KEY })
  );
}

export function getProgramDataAccountDecoder(): Decoder<ProgramDataAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getProgramDataDecoder()],
  ]);
}

export function getProgramDataAccountCodec(): Codec<
  ProgramDataAccountArgs,
  ProgramDataAccount
> {
  return combineCodec(
    getProgramDataAccountEncoder(),
    getProgramDataAccountDecoder()
  );
}

export function decodeProgramDataAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProgramDataAccount, TAddress>;
export function decodeProgramDataAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProgramDataAccount, TAddress>;
export function decodeProgramDataAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ProgramDataAccount, TAddress>
  | MaybeAccount<ProgramDataAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProgramDataAccountDecoder()
  );
}

export async function fetchProgramDataAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProgramDataAccount, TAddress>> {
  const maybeAccount = await fetchMaybeProgramDataAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramDataAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProgramDataAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProgramDataAccount(maybeAccount);
}

export async function fetchAllProgramDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProgramDataAccount>[]> {
  const maybeAccounts = await fetchAllMaybeProgramDataAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProgramDataAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProgramDataAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProgramDataAccount(maybeAccount)
  );
}

export function getProgramDataAccountSize(): number {
  return 34;
}

export async function fetchProgramDataAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<ProgramDataAccount>> {
  const maybeAccount = await fetchMaybeProgramDataAccountFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramDataAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<ProgramDataAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProgramDataAccountPda({ programAddress });
  return await fetchMaybeProgramDataAccount(rpc, address, fetchConfig);
}
