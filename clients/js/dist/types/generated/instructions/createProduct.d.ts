/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/web3.js';
import { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_PRODUCT_DISCRIMINATOR = 1;
export declare function getCreateProductDiscriminatorBytes(): import("@solana/web3.js").ReadonlyUint8Array;
export type CreateProductInstruction<TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountToken2022Program extends string | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb', TAccountPayer extends string | IAccountMeta<string> = string, TAccountVendor extends string | IAccountMeta<string> = string, TAccountProductMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountVendor extends string ? ReadonlySignerAccount<TAccountVendor> & IAccountSignerMeta<TAccountVendor> : TAccountVendor,
    TAccountProductMint extends string ? WritableAccount<TAccountProductMint> : TAccountProductMint,
    ...TRemainingAccounts
]>;
export type CreateProductInstructionData = {
    discriminator: number;
    name: string;
    symbol: string;
    uri: string;
    additionalMetadata: Array<readonly [string, string]>;
};
export type CreateProductInstructionDataArgs = {
    name: string;
    symbol: string;
    uri: string;
    additionalMetadata: Array<readonly [string, string]>;
};
export declare function getCreateProductInstructionDataEncoder(): Encoder<CreateProductInstructionDataArgs>;
export declare function getCreateProductInstructionDataDecoder(): Decoder<CreateProductInstructionData>;
export declare function getCreateProductInstructionDataCodec(): Codec<CreateProductInstructionDataArgs, CreateProductInstructionData>;
export type CreateProductInput<TAccountSystemProgram extends string = string, TAccountToken2022Program extends string = string, TAccountPayer extends string = string, TAccountVendor extends string = string, TAccountProductMint extends string = string> = {
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The SPL Token 2022 program */
    token2022Program?: Address<TAccountToken2022Program>;
    /** The account paying for the storage fees */
    payer: TransactionSigner<TAccountPayer>;
    /** The vendor */
    vendor: TransactionSigner<TAccountVendor>;
    /** The mint account of the product */
    productMint: Address<TAccountProductMint>;
    name: CreateProductInstructionDataArgs['name'];
    symbol: CreateProductInstructionDataArgs['symbol'];
    uri: CreateProductInstructionDataArgs['uri'];
    additionalMetadata: CreateProductInstructionDataArgs['additionalMetadata'];
};
export declare function getCreateProductInstruction<TAccountSystemProgram extends string, TAccountToken2022Program extends string, TAccountPayer extends string, TAccountVendor extends string, TAccountProductMint extends string, TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS>(input: CreateProductInput<TAccountSystemProgram, TAccountToken2022Program, TAccountPayer, TAccountVendor, TAccountProductMint>, config?: {
    programAddress?: TProgramAddress;
}): CreateProductInstruction<TProgramAddress, TAccountSystemProgram, TAccountToken2022Program, TAccountPayer, TAccountVendor, TAccountProductMint>;
export type ParsedCreateProductInstruction<TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The system program */
        systemProgram: TAccountMetas[0];
        /** The SPL Token 2022 program */
        token2022Program: TAccountMetas[1];
        /** The account paying for the storage fees */
        payer: TAccountMetas[2];
        /** The vendor */
        vendor: TAccountMetas[3];
        /** The mint account of the product */
        productMint: TAccountMetas[4];
    };
    data: CreateProductInstructionData;
};
export declare function parseCreateProductInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCreateProductInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=createProduct.d.ts.map