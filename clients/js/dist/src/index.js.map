{"version":3,"sources":["../../src/generated/pdas/deviceAToken.ts","../../src/generated/pdas/deviceMint.ts","../../src/generated/pdas/productAToken.ts","../../src/generated/pdas/productMint.ts","../../src/generated/pdas/programData.ts","../../src/generated/pdas/programDataAccount.ts","../../src/generated/types/createActivatedDeviceArgs.ts","../../src/generated/types/deviceActivationSignature.ts","../../src/generated/types/deviceSigningAlgorithm.ts","../../src/generated/types/key.ts","../../src/generated/types/programData.ts","../../src/generated/accounts/programDataAccount.ts","../../src/generated/programs/dephyId.ts","../../src/generated/errors/dephyId.ts","../../src/generated/shared/index.ts","../../src/generated/instructions/activateDevice.ts","../../src/generated/instructions/createActivatedDevice.ts","../../src/generated/instructions/createActivatedDeviceNonSigner.ts","../../src/generated/instructions/createDevice.ts","../../src/generated/instructions/createProduct.ts","../../src/generated/instructions/initialize.ts"],"names":["getProgramDerivedAddress","getAddressEncoder","address","getUtf8Encoder","getStructEncoder","addEncoderSizePrefix","getU32Encoder","getArrayEncoder","getTupleEncoder","getStructDecoder","addDecoderSizePrefix","getUtf8Decoder","getU32Decoder","getArrayDecoder","getTupleDecoder","combineCodec","getDiscriminatedUnionEncoder","fixEncoderSize","getBytesEncoder","getU8Encoder","getDiscriminatedUnionDecoder","fixDecoderSize","getBytesDecoder","getU8Decoder","DeviceSigningAlgorithm","getEnumEncoder","getEnumDecoder","Key","transformEncoder","getAddressDecoder","decodeAccount","assertAccountExists","fetchEncodedAccount","assertAccountsExist","fetchEncodedAccounts","DephyIdAccount","containsBytes","DephyIdInstruction","isProgramError","AccountRole","upgradeRoleToSigner","web3JsIsTransactionSigner","getU64Encoder","getU64Decoder"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  address,\n  getAddressEncoder,\n  getProgramDerivedAddress,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport type DeviceATokenSeeds = {\n  ownerPubkey: Address;\n\n  deviceMintPubkey: Address;\n};\n\nexport async function findDeviceATokenPda(\n  seeds: DeviceATokenSeeds,\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [\n      getAddressEncoder().encode(seeds.ownerPubkey),\n      getAddressEncoder().encode(\n        address('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb')\n      ),\n      getAddressEncoder().encode(seeds.deviceMintPubkey),\n    ],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  getAddressEncoder,\n  getProgramDerivedAddress,\n  getUtf8Encoder,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport type DeviceMintSeeds = {\n  productMintPubkey: Address;\n\n  devicePubkey: Address;\n};\n\nexport async function findDeviceMintPda(\n  seeds: DeviceMintSeeds,\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [\n      getUtf8Encoder().encode('DePHY_ID-DEVICE'),\n      getAddressEncoder().encode(seeds.productMintPubkey),\n      getAddressEncoder().encode(seeds.devicePubkey),\n    ],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  address,\n  getAddressEncoder,\n  getProgramDerivedAddress,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport type ProductATokenSeeds = {\n  devicePubkey: Address;\n\n  productMintPubkey: Address;\n};\n\nexport async function findProductATokenPda(\n  seeds: ProductATokenSeeds,\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [\n      getAddressEncoder().encode(seeds.devicePubkey),\n      getAddressEncoder().encode(\n        address('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb')\n      ),\n      getAddressEncoder().encode(seeds.productMintPubkey),\n    ],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  getAddressEncoder,\n  getProgramDerivedAddress,\n  getUtf8Encoder,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport type ProductMintSeeds = {\n  vendorPubkey: Address;\n\n  productName: string;\n};\n\nexport async function findProductMintPda(\n  seeds: ProductMintSeeds,\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [\n      getUtf8Encoder().encode('DePHY_ID-PRODUCT'),\n      getAddressEncoder().encode(seeds.vendorPubkey),\n      getUtf8Encoder().encode(seeds.productName),\n    ],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  getProgramDerivedAddress,\n  getUtf8Encoder,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport async function findProgramDataPda(\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [getUtf8Encoder().encode('DePHY_ID')],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  getProgramDerivedAddress,\n  getUtf8Encoder,\n  type Address,\n  type ProgramDerivedAddress,\n} from '@solana/web3.js';\n\nexport async function findProgramDataAccountPda(\n  config: { programAddress?: Address | undefined } = {}\n): Promise<ProgramDerivedAddress> {\n  const {\n    programAddress = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>,\n  } = config;\n  return await getProgramDerivedAddress({\n    programAddress,\n    seeds: [getUtf8Encoder().encode('DePHY_ID')],\n  });\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  getArrayDecoder,\n  getArrayEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/web3.js';\n\nexport type CreateActivatedDeviceArgs = {\n  name: string;\n  uri: string;\n  additionalMetadata: Array<readonly [string, string]>;\n};\n\nexport type CreateActivatedDeviceArgsArgs = CreateActivatedDeviceArgs;\n\nexport function getCreateActivatedDeviceArgsEncoder(): Encoder<CreateActivatedDeviceArgsArgs> {\n  return getStructEncoder([\n    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    [\n      'additionalMetadata',\n      getArrayEncoder(\n        getTupleEncoder([\n          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n        ])\n      ),\n    ],\n  ]);\n}\n\nexport function getCreateActivatedDeviceArgsDecoder(): Decoder<CreateActivatedDeviceArgs> {\n  return getStructDecoder([\n    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    [\n      'additionalMetadata',\n      getArrayDecoder(\n        getTupleDecoder([\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n        ])\n      ),\n    ],\n  ]);\n}\n\nexport function getCreateActivatedDeviceArgsCodec(): Codec<\n  CreateActivatedDeviceArgsArgs,\n  CreateActivatedDeviceArgs\n> {\n  return combineCodec(\n    getCreateActivatedDeviceArgsEncoder(),\n    getCreateActivatedDeviceArgsDecoder()\n  );\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  fixDecoderSize,\n  fixEncoderSize,\n  getBytesDecoder,\n  getBytesEncoder,\n  getDiscriminatedUnionDecoder,\n  getDiscriminatedUnionEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type GetDiscriminatedUnionVariant,\n  type GetDiscriminatedUnionVariantContent,\n  type ReadonlyUint8Array,\n} from '@solana/web3.js';\n\nexport type DeviceActivationSignature =\n  | { __kind: 'Ed25519'; fields: readonly [ReadonlyUint8Array] }\n  | { __kind: 'Secp256k1'; fields: readonly [ReadonlyUint8Array, number] }\n  | { __kind: 'EthSecp256k1'; fields: readonly [ReadonlyUint8Array, number] };\n\nexport type DeviceActivationSignatureArgs = DeviceActivationSignature;\n\nexport function getDeviceActivationSignatureEncoder(): Encoder<DeviceActivationSignatureArgs> {\n  return getDiscriminatedUnionEncoder([\n    [\n      'Ed25519',\n      getStructEncoder([\n        ['fields', getTupleEncoder([fixEncoderSize(getBytesEncoder(), 64)])],\n      ]),\n    ],\n    [\n      'Secp256k1',\n      getStructEncoder([\n        [\n          'fields',\n          getTupleEncoder([\n            fixEncoderSize(getBytesEncoder(), 64),\n            getU8Encoder(),\n          ]),\n        ],\n      ]),\n    ],\n    [\n      'EthSecp256k1',\n      getStructEncoder([\n        [\n          'fields',\n          getTupleEncoder([\n            fixEncoderSize(getBytesEncoder(), 64),\n            getU8Encoder(),\n          ]),\n        ],\n      ]),\n    ],\n  ]);\n}\n\nexport function getDeviceActivationSignatureDecoder(): Decoder<DeviceActivationSignature> {\n  return getDiscriminatedUnionDecoder([\n    [\n      'Ed25519',\n      getStructDecoder([\n        ['fields', getTupleDecoder([fixDecoderSize(getBytesDecoder(), 64)])],\n      ]),\n    ],\n    [\n      'Secp256k1',\n      getStructDecoder([\n        [\n          'fields',\n          getTupleDecoder([\n            fixDecoderSize(getBytesDecoder(), 64),\n            getU8Decoder(),\n          ]),\n        ],\n      ]),\n    ],\n    [\n      'EthSecp256k1',\n      getStructDecoder([\n        [\n          'fields',\n          getTupleDecoder([\n            fixDecoderSize(getBytesDecoder(), 64),\n            getU8Decoder(),\n          ]),\n        ],\n      ]),\n    ],\n  ]);\n}\n\nexport function getDeviceActivationSignatureCodec(): Codec<\n  DeviceActivationSignatureArgs,\n  DeviceActivationSignature\n> {\n  return combineCodec(\n    getDeviceActivationSignatureEncoder(),\n    getDeviceActivationSignatureDecoder()\n  );\n}\n\n// Data Enum Helpers.\nexport function deviceActivationSignature(\n  kind: 'Ed25519',\n  data: GetDiscriminatedUnionVariantContent<\n    DeviceActivationSignatureArgs,\n    '__kind',\n    'Ed25519'\n  >['fields']\n): GetDiscriminatedUnionVariant<\n  DeviceActivationSignatureArgs,\n  '__kind',\n  'Ed25519'\n>;\nexport function deviceActivationSignature(\n  kind: 'Secp256k1',\n  data: GetDiscriminatedUnionVariantContent<\n    DeviceActivationSignatureArgs,\n    '__kind',\n    'Secp256k1'\n  >['fields']\n): GetDiscriminatedUnionVariant<\n  DeviceActivationSignatureArgs,\n  '__kind',\n  'Secp256k1'\n>;\nexport function deviceActivationSignature(\n  kind: 'EthSecp256k1',\n  data: GetDiscriminatedUnionVariantContent<\n    DeviceActivationSignatureArgs,\n    '__kind',\n    'EthSecp256k1'\n  >['fields']\n): GetDiscriminatedUnionVariant<\n  DeviceActivationSignatureArgs,\n  '__kind',\n  'EthSecp256k1'\n>;\nexport function deviceActivationSignature<\n  K extends DeviceActivationSignatureArgs['__kind'],\n  Data,\n>(kind: K, data?: Data) {\n  return Array.isArray(data)\n    ? { __kind: kind, fields: data }\n    : { __kind: kind, ...(data ?? {}) };\n}\n\nexport function isDeviceActivationSignature<\n  K extends DeviceActivationSignature['__kind'],\n>(\n  kind: K,\n  value: DeviceActivationSignature\n): value is DeviceActivationSignature & { __kind: K } {\n  return value.__kind === kind;\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getEnumDecoder,\n  getEnumEncoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/web3.js';\n\nexport enum DeviceSigningAlgorithm {\n  Ed25519,\n  Secp256k1,\n}\n\nexport type DeviceSigningAlgorithmArgs = DeviceSigningAlgorithm;\n\nexport function getDeviceSigningAlgorithmEncoder(): Encoder<DeviceSigningAlgorithmArgs> {\n  return getEnumEncoder(DeviceSigningAlgorithm);\n}\n\nexport function getDeviceSigningAlgorithmDecoder(): Decoder<DeviceSigningAlgorithm> {\n  return getEnumDecoder(DeviceSigningAlgorithm);\n}\n\nexport function getDeviceSigningAlgorithmCodec(): Codec<\n  DeviceSigningAlgorithmArgs,\n  DeviceSigningAlgorithm\n> {\n  return combineCodec(\n    getDeviceSigningAlgorithmEncoder(),\n    getDeviceSigningAlgorithmDecoder()\n  );\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getEnumDecoder,\n  getEnumEncoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/web3.js';\n\nexport enum Key {\n  Uninitialized,\n  ProgramDataAccount,\n}\n\nexport type KeyArgs = Key;\n\nexport function getKeyEncoder(): Encoder<KeyArgs> {\n  return getEnumEncoder(Key);\n}\n\nexport function getKeyDecoder(): Decoder<Key> {\n  return getEnumDecoder(Key);\n}\n\nexport function getKeyCodec(): Codec<KeyArgs, Key> {\n  return combineCodec(getKeyEncoder(), getKeyDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  type Codec,\n  type Decoder,\n  type Encoder,\n} from '@solana/web3.js';\n\nexport type ProgramData = { bump: number };\n\nexport type ProgramDataArgs = ProgramData;\n\nexport function getProgramDataEncoder(): Encoder<ProgramDataArgs> {\n  return getStructEncoder([['bump', getU8Encoder()]]);\n}\n\nexport function getProgramDataDecoder(): Decoder<ProgramData> {\n  return getStructDecoder([['bump', getU8Decoder()]]);\n}\n\nexport function getProgramDataCodec(): Codec<ProgramDataArgs, ProgramData> {\n  return combineCodec(getProgramDataEncoder(), getProgramDataDecoder());\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  assertAccountExists,\n  assertAccountsExist,\n  combineCodec,\n  decodeAccount,\n  fetchEncodedAccount,\n  fetchEncodedAccounts,\n  getAddressDecoder,\n  getAddressEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  transformEncoder,\n  type Account,\n  type Address,\n  type Codec,\n  type Decoder,\n  type EncodedAccount,\n  type Encoder,\n  type FetchAccountConfig,\n  type FetchAccountsConfig,\n  type MaybeAccount,\n  type MaybeEncodedAccount,\n} from '@solana/web3.js';\nimport { findProgramDataAccountPda } from '../pdas';\nimport {\n  Key,\n  getKeyDecoder,\n  getKeyEncoder,\n  getProgramDataDecoder,\n  getProgramDataEncoder,\n  type ProgramData,\n  type ProgramDataArgs,\n} from '../types';\n\nexport const PROGRAM_DATA_ACCOUNT_KEY = Key.ProgramDataAccount;\n\nexport function getProgramDataAccountKeyBytes() {\n  return getKeyEncoder().encode(PROGRAM_DATA_ACCOUNT_KEY);\n}\n\nexport type ProgramDataAccount = {\n  key: Key;\n  authority: Address;\n  data: ProgramData;\n};\n\nexport type ProgramDataAccountArgs = {\n  authority: Address;\n  data: ProgramDataArgs;\n};\n\nexport function getProgramDataAccountEncoder(): Encoder<ProgramDataAccountArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['key', getKeyEncoder()],\n      ['authority', getAddressEncoder()],\n      ['data', getProgramDataEncoder()],\n    ]),\n    (value) => ({ ...value, key: PROGRAM_DATA_ACCOUNT_KEY })\n  );\n}\n\nexport function getProgramDataAccountDecoder(): Decoder<ProgramDataAccount> {\n  return getStructDecoder([\n    ['key', getKeyDecoder()],\n    ['authority', getAddressDecoder()],\n    ['data', getProgramDataDecoder()],\n  ]);\n}\n\nexport function getProgramDataAccountCodec(): Codec<\n  ProgramDataAccountArgs,\n  ProgramDataAccount\n> {\n  return combineCodec(\n    getProgramDataAccountEncoder(),\n    getProgramDataAccountDecoder()\n  );\n}\n\nexport function decodeProgramDataAccount<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress>\n): Account<ProgramDataAccount, TAddress>;\nexport function decodeProgramDataAccount<TAddress extends string = string>(\n  encodedAccount: MaybeEncodedAccount<TAddress>\n): MaybeAccount<ProgramDataAccount, TAddress>;\nexport function decodeProgramDataAccount<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>\n):\n  | Account<ProgramDataAccount, TAddress>\n  | MaybeAccount<ProgramDataAccount, TAddress> {\n  return decodeAccount(\n    encodedAccount as MaybeEncodedAccount<TAddress>,\n    getProgramDataAccountDecoder()\n  );\n}\n\nexport async function fetchProgramDataAccount<TAddress extends string = string>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<Account<ProgramDataAccount, TAddress>> {\n  const maybeAccount = await fetchMaybeProgramDataAccount(rpc, address, config);\n  assertAccountExists(maybeAccount);\n  return maybeAccount;\n}\n\nexport async function fetchMaybeProgramDataAccount<\n  TAddress extends string = string,\n>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<MaybeAccount<ProgramDataAccount, TAddress>> {\n  const maybeAccount = await fetchEncodedAccount(rpc, address, config);\n  return decodeProgramDataAccount(maybeAccount);\n}\n\nexport async function fetchAllProgramDataAccount(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<Account<ProgramDataAccount>[]> {\n  const maybeAccounts = await fetchAllMaybeProgramDataAccount(\n    rpc,\n    addresses,\n    config\n  );\n  assertAccountsExist(maybeAccounts);\n  return maybeAccounts;\n}\n\nexport async function fetchAllMaybeProgramDataAccount(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<MaybeAccount<ProgramDataAccount>[]> {\n  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);\n  return maybeAccounts.map((maybeAccount) =>\n    decodeProgramDataAccount(maybeAccount)\n  );\n}\n\nexport function getProgramDataAccountSize(): number {\n  return 34;\n}\n\nexport async function fetchProgramDataAccountFromSeeds(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  config: FetchAccountConfig & { programAddress?: Address } = {}\n): Promise<Account<ProgramDataAccount>> {\n  const maybeAccount = await fetchMaybeProgramDataAccountFromSeeds(rpc, config);\n  assertAccountExists(maybeAccount);\n  return maybeAccount;\n}\n\nexport async function fetchMaybeProgramDataAccountFromSeeds(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  config: FetchAccountConfig & { programAddress?: Address } = {}\n): Promise<MaybeAccount<ProgramDataAccount>> {\n  const { programAddress, ...fetchConfig } = config;\n  const [address] = await findProgramDataAccountPda({ programAddress });\n  return await fetchMaybeProgramDataAccount(rpc, address, fetchConfig);\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  containsBytes,\n  getU8Encoder,\n  type Address,\n  type ReadonlyUint8Array,\n} from '@solana/web3.js';\nimport {\n  type ParsedActivateDeviceInstruction,\n  type ParsedCreateActivatedDeviceInstruction,\n  type ParsedCreateActivatedDeviceNonSignerInstruction,\n  type ParsedCreateDeviceInstruction,\n  type ParsedCreateProductInstruction,\n  type ParsedInitializeInstruction,\n} from '../instructions';\nimport { Key, getKeyEncoder } from '../types';\n\nexport const DEPHY_ID_PROGRAM_ADDRESS =\n  'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>;\n\nexport enum DephyIdAccount {\n  ProgramDataAccount,\n}\n\nexport function identifyDephyIdAccount(\n  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array\n): DephyIdAccount {\n  const data = 'data' in account ? account.data : account;\n  if (containsBytes(data, getKeyEncoder().encode(Key.ProgramDataAccount), 0)) {\n    return DephyIdAccount.ProgramDataAccount;\n  }\n  throw new Error(\n    'The provided account could not be identified as a dephyId account.'\n  );\n}\n\nexport enum DephyIdInstruction {\n  Initialize,\n  CreateProduct,\n  CreateDevice,\n  ActivateDevice,\n  CreateActivatedDevice,\n  CreateActivatedDeviceNonSigner,\n}\n\nexport function identifyDephyIdInstruction(\n  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array\n): DephyIdInstruction {\n  const data = 'data' in instruction ? instruction.data : instruction;\n  if (containsBytes(data, getU8Encoder().encode(0), 0)) {\n    return DephyIdInstruction.Initialize;\n  }\n  if (containsBytes(data, getU8Encoder().encode(1), 0)) {\n    return DephyIdInstruction.CreateProduct;\n  }\n  if (containsBytes(data, getU8Encoder().encode(2), 0)) {\n    return DephyIdInstruction.CreateDevice;\n  }\n  if (containsBytes(data, getU8Encoder().encode(3), 0)) {\n    return DephyIdInstruction.ActivateDevice;\n  }\n  if (containsBytes(data, getU8Encoder().encode(4), 0)) {\n    return DephyIdInstruction.CreateActivatedDevice;\n  }\n  if (containsBytes(data, getU8Encoder().encode(5), 0)) {\n    return DephyIdInstruction.CreateActivatedDeviceNonSigner;\n  }\n  throw new Error(\n    'The provided instruction could not be identified as a dephyId instruction.'\n  );\n}\n\nexport type ParsedDephyIdInstruction<\n  TProgram extends string = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1',\n> =\n  | ({\n      instructionType: DephyIdInstruction.Initialize;\n    } & ParsedInitializeInstruction<TProgram>)\n  | ({\n      instructionType: DephyIdInstruction.CreateProduct;\n    } & ParsedCreateProductInstruction<TProgram>)\n  | ({\n      instructionType: DephyIdInstruction.CreateDevice;\n    } & ParsedCreateDeviceInstruction<TProgram>)\n  | ({\n      instructionType: DephyIdInstruction.ActivateDevice;\n    } & ParsedActivateDeviceInstruction<TProgram>)\n  | ({\n      instructionType: DephyIdInstruction.CreateActivatedDevice;\n    } & ParsedCreateActivatedDeviceInstruction<TProgram>)\n  | ({\n      instructionType: DephyIdInstruction.CreateActivatedDeviceNonSigner;\n    } & ParsedCreateActivatedDeviceNonSignerInstruction<TProgram>);\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  isProgramError,\n  type Address,\n  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,\n  type SolanaError,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\n\n/** DeserializationError: Error deserializing an account */\nexport const DEPHY_ID_ERROR__DESERIALIZATION_ERROR = 0x0; // 0\n/** SerializationError: Error serializing an account */\nexport const DEPHY_ID_ERROR__SERIALIZATION_ERROR = 0x1; // 1\n/** InvalidProgramOwner: Invalid program owner. This likely mean the provided account does not exist */\nexport const DEPHY_ID_ERROR__INVALID_PROGRAM_OWNER = 0x2; // 2\n/** InvalidPda: Invalid PDA derivation */\nexport const DEPHY_ID_ERROR__INVALID_PDA = 0x3; // 3\n/** ExpectedEmptyAccount: Expected empty account */\nexport const DEPHY_ID_ERROR__EXPECTED_EMPTY_ACCOUNT = 0x4; // 4\n/** ExpectedNonEmptyAccount: Expected non empty account */\nexport const DEPHY_ID_ERROR__EXPECTED_NON_EMPTY_ACCOUNT = 0x5; // 5\n/** ExpectedSignerAccount: Expected signer account */\nexport const DEPHY_ID_ERROR__EXPECTED_SIGNER_ACCOUNT = 0x6; // 6\n/** ExpectedWritableAccount: Expected writable account */\nexport const DEPHY_ID_ERROR__EXPECTED_WRITABLE_ACCOUNT = 0x7; // 7\n/** AccountMismatch: Account mismatch */\nexport const DEPHY_ID_ERROR__ACCOUNT_MISMATCH = 0x8; // 8\n/** InvalidAccountKey: Invalid account key */\nexport const DEPHY_ID_ERROR__INVALID_ACCOUNT_KEY = 0x9; // 9\n/** NumericalOverflow: Numerical overflow */\nexport const DEPHY_ID_ERROR__NUMERICAL_OVERFLOW = 0xa; // 10\n/** MissingInstruction: Missing instruction */\nexport const DEPHY_ID_ERROR__MISSING_INSTRUCTION = 0xb; // 11\n/** SignatureMismatch: Signature mismatch */\nexport const DEPHY_ID_ERROR__SIGNATURE_MISMATCH = 0xc; // 12\n\nexport type DephyIdError =\n  | typeof DEPHY_ID_ERROR__ACCOUNT_MISMATCH\n  | typeof DEPHY_ID_ERROR__DESERIALIZATION_ERROR\n  | typeof DEPHY_ID_ERROR__EXPECTED_EMPTY_ACCOUNT\n  | typeof DEPHY_ID_ERROR__EXPECTED_NON_EMPTY_ACCOUNT\n  | typeof DEPHY_ID_ERROR__EXPECTED_SIGNER_ACCOUNT\n  | typeof DEPHY_ID_ERROR__EXPECTED_WRITABLE_ACCOUNT\n  | typeof DEPHY_ID_ERROR__INVALID_ACCOUNT_KEY\n  | typeof DEPHY_ID_ERROR__INVALID_PDA\n  | typeof DEPHY_ID_ERROR__INVALID_PROGRAM_OWNER\n  | typeof DEPHY_ID_ERROR__MISSING_INSTRUCTION\n  | typeof DEPHY_ID_ERROR__NUMERICAL_OVERFLOW\n  | typeof DEPHY_ID_ERROR__SERIALIZATION_ERROR\n  | typeof DEPHY_ID_ERROR__SIGNATURE_MISMATCH;\n\nlet dephyIdErrorMessages: Record<DephyIdError, string> | undefined;\nif (process.env.NODE_ENV !== 'production') {\n  dephyIdErrorMessages = {\n    [DEPHY_ID_ERROR__ACCOUNT_MISMATCH]: `Account mismatch`,\n    [DEPHY_ID_ERROR__DESERIALIZATION_ERROR]: `Error deserializing an account`,\n    [DEPHY_ID_ERROR__EXPECTED_EMPTY_ACCOUNT]: `Expected empty account`,\n    [DEPHY_ID_ERROR__EXPECTED_NON_EMPTY_ACCOUNT]: `Expected non empty account`,\n    [DEPHY_ID_ERROR__EXPECTED_SIGNER_ACCOUNT]: `Expected signer account`,\n    [DEPHY_ID_ERROR__EXPECTED_WRITABLE_ACCOUNT]: `Expected writable account`,\n    [DEPHY_ID_ERROR__INVALID_ACCOUNT_KEY]: `Invalid account key`,\n    [DEPHY_ID_ERROR__INVALID_PDA]: `Invalid PDA derivation`,\n    [DEPHY_ID_ERROR__INVALID_PROGRAM_OWNER]: `Invalid program owner. This likely mean the provided account does not exist`,\n    [DEPHY_ID_ERROR__MISSING_INSTRUCTION]: `Missing instruction`,\n    [DEPHY_ID_ERROR__NUMERICAL_OVERFLOW]: `Numerical overflow`,\n    [DEPHY_ID_ERROR__SERIALIZATION_ERROR]: `Error serializing an account`,\n    [DEPHY_ID_ERROR__SIGNATURE_MISMATCH]: `Signature mismatch`,\n  };\n}\n\nexport function getDephyIdErrorMessage(code: DephyIdError): string {\n  if (process.env.NODE_ENV !== 'production') {\n    return (dephyIdErrorMessages as Record<DephyIdError, string>)[code];\n  }\n\n  return 'Error message not available in production bundles.';\n}\n\nexport function isDephyIdError<TProgramErrorCode extends DephyIdError>(\n  error: unknown,\n  transactionMessage: {\n    instructions: Record<number, { programAddress: Address }>;\n  },\n  code?: TProgramErrorCode\n): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &\n  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {\n  return isProgramError<TProgramErrorCode>(\n    error,\n    transactionMessage,\n    DEPHY_ID_PROGRAM_ADDRESS,\n    code\n  );\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  AccountRole,\n  isProgramDerivedAddress,\n  isTransactionSigner as web3JsIsTransactionSigner,\n  type Address,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type ProgramDerivedAddress,\n  type TransactionSigner,\n  upgradeRoleToSigner,\n} from '@solana/web3.js';\n\n/**\n * Asserts that the given value is not null or undefined.\n * @internal\n */\nexport function expectSome<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('Expected a value but received null or undefined.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a PublicKey.\n * @internal\n */\nexport function expectAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): Address<T> {\n  if (!value) {\n    throw new Error('Expected a Address.');\n  }\n  if (typeof value === 'object' && 'address' in value) {\n    return value.address;\n  }\n  if (Array.isArray(value)) {\n    return value[0];\n  }\n  return value as Address<T>;\n}\n\n/**\n * Asserts that the given value is a PDA.\n * @internal\n */\nexport function expectProgramDerivedAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): ProgramDerivedAddress<T> {\n  if (!value || !Array.isArray(value) || !isProgramDerivedAddress(value)) {\n    throw new Error('Expected a ProgramDerivedAddress.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a TransactionSigner.\n * @internal\n */\nexport function expectTransactionSigner<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): TransactionSigner<T> {\n  if (!value || !isTransactionSigner(value)) {\n    throw new Error('Expected a TransactionSigner.');\n  }\n  return value;\n}\n\n/**\n * Defines an instruction account to resolve.\n * @internal\n */\nexport type ResolvedAccount<\n  T extends string = string,\n  U extends\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null =\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null,\n> = {\n  isWritable: boolean;\n  value: U;\n};\n\n/**\n * Defines an instruction that stores additional bytes on-chain.\n * @internal\n */\nexport type IInstructionWithByteDelta = {\n  byteDelta: number;\n};\n\n/**\n * Get account metas and signers from resolved accounts.\n * @internal\n */\nexport function getAccountMetaFactory(\n  programAddress: Address,\n  optionalAccountStrategy: 'omitted' | 'programId'\n) {\n  return (\n    account: ResolvedAccount\n  ): IAccountMeta | IAccountSignerMeta | undefined => {\n    if (!account.value) {\n      if (optionalAccountStrategy === 'omitted') return;\n      return Object.freeze({\n        address: programAddress,\n        role: AccountRole.READONLY,\n      });\n    }\n\n    const writableRole = account.isWritable\n      ? AccountRole.WRITABLE\n      : AccountRole.READONLY;\n    return Object.freeze({\n      address: expectAddress(account.value),\n      role: isTransactionSigner(account.value)\n        ? upgradeRoleToSigner(writableRole)\n        : writableRole,\n      ...(isTransactionSigner(account.value) ? { signer: account.value } : {}),\n    });\n  };\n}\n\nexport function isTransactionSigner<TAddress extends string = string>(\n  value:\n    | Address<TAddress>\n    | ProgramDerivedAddress<TAddress>\n    | TransactionSigner<TAddress>\n): value is TransactionSigner<TAddress> {\n  return (\n    !!value &&\n    typeof value === 'object' &&\n    'address' in value &&\n    web3JsIsTransactionSigner(value)\n  );\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU64Decoder,\n  getU64Encoder,\n  getU8Decoder,\n  getU8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\nimport {\n  getDeviceActivationSignatureDecoder,\n  getDeviceActivationSignatureEncoder,\n  type DeviceActivationSignature,\n  type DeviceActivationSignatureArgs,\n} from '../types';\n\nexport const ACTIVATE_DEVICE_DISCRIMINATOR = 3;\n\nexport function getActivateDeviceDiscriminatorBytes() {\n  return getU8Encoder().encode(ACTIVATE_DEVICE_DISCRIMINATOR);\n}\n\nexport type ActivateDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountToken2022Program extends\n    | string\n    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',\n  TAccountAtaProgram extends\n    | string\n    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountVendor extends string | IAccountMeta<string> = string,\n  TAccountProductMint extends string | IAccountMeta<string> = string,\n  TAccountProductAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountDevice extends string | IAccountMeta<string> = string,\n  TAccountDeviceMint extends string | IAccountMeta<string> = string,\n  TAccountDeviceAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountOwner extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountToken2022Program extends string\n        ? ReadonlyAccount<TAccountToken2022Program>\n        : TAccountToken2022Program,\n      TAccountAtaProgram extends string\n        ? ReadonlyAccount<TAccountAtaProgram>\n        : TAccountAtaProgram,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountVendor extends string\n        ? ReadonlyAccount<TAccountVendor>\n        : TAccountVendor,\n      TAccountProductMint extends string\n        ? ReadonlyAccount<TAccountProductMint>\n        : TAccountProductMint,\n      TAccountProductAssociatedToken extends string\n        ? ReadonlyAccount<TAccountProductAssociatedToken>\n        : TAccountProductAssociatedToken,\n      TAccountDevice extends string\n        ? ReadonlyAccount<TAccountDevice>\n        : TAccountDevice,\n      TAccountDeviceMint extends string\n        ? WritableAccount<TAccountDeviceMint>\n        : TAccountDeviceMint,\n      TAccountDeviceAssociatedToken extends string\n        ? WritableAccount<TAccountDeviceAssociatedToken>\n        : TAccountDeviceAssociatedToken,\n      TAccountOwner extends string\n        ? ReadonlyAccount<TAccountOwner>\n        : TAccountOwner,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type ActivateDeviceInstructionData = {\n  discriminator: number;\n  signature: DeviceActivationSignature;\n  timestamp: bigint;\n};\n\nexport type ActivateDeviceInstructionDataArgs = {\n  signature: DeviceActivationSignatureArgs;\n  timestamp: number | bigint;\n};\n\nexport function getActivateDeviceInstructionDataEncoder(): Encoder<ActivateDeviceInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['signature', getDeviceActivationSignatureEncoder()],\n      ['timestamp', getU64Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: ACTIVATE_DEVICE_DISCRIMINATOR })\n  );\n}\n\nexport function getActivateDeviceInstructionDataDecoder(): Decoder<ActivateDeviceInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['signature', getDeviceActivationSignatureDecoder()],\n    ['timestamp', getU64Decoder()],\n  ]);\n}\n\nexport function getActivateDeviceInstructionDataCodec(): Codec<\n  ActivateDeviceInstructionDataArgs,\n  ActivateDeviceInstructionData\n> {\n  return combineCodec(\n    getActivateDeviceInstructionDataEncoder(),\n    getActivateDeviceInstructionDataDecoder()\n  );\n}\n\nexport type ActivateDeviceInput<\n  TAccountSystemProgram extends string = string,\n  TAccountToken2022Program extends string = string,\n  TAccountAtaProgram extends string = string,\n  TAccountPayer extends string = string,\n  TAccountVendor extends string = string,\n  TAccountProductMint extends string = string,\n  TAccountProductAssociatedToken extends string = string,\n  TAccountDevice extends string = string,\n  TAccountDeviceMint extends string = string,\n  TAccountDeviceAssociatedToken extends string = string,\n  TAccountOwner extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The SPL Token 2022 program */\n  token2022Program?: Address<TAccountToken2022Program>;\n  /** The associated token program */\n  ataProgram?: Address<TAccountAtaProgram>;\n  /** The account paying for the storage fees */\n  payer: TransactionSigner<TAccountPayer>;\n  /** The vendor */\n  vendor: Address<TAccountVendor>;\n  /** The mint account for the product */\n  productMint: Address<TAccountProductMint>;\n  /** The associated token account for the product */\n  productAssociatedToken: Address<TAccountProductAssociatedToken>;\n  /** The device */\n  device: Address<TAccountDevice>;\n  /** The mint account for the device */\n  deviceMint: Address<TAccountDeviceMint>;\n  /** The associated token account for the device */\n  deviceAssociatedToken: Address<TAccountDeviceAssociatedToken>;\n  /** The device's owner */\n  owner: Address<TAccountOwner>;\n  signature: ActivateDeviceInstructionDataArgs['signature'];\n  timestamp: ActivateDeviceInstructionDataArgs['timestamp'];\n};\n\nexport function getActivateDeviceInstruction<\n  TAccountSystemProgram extends string,\n  TAccountToken2022Program extends string,\n  TAccountAtaProgram extends string,\n  TAccountPayer extends string,\n  TAccountVendor extends string,\n  TAccountProductMint extends string,\n  TAccountProductAssociatedToken extends string,\n  TAccountDevice extends string,\n  TAccountDeviceMint extends string,\n  TAccountDeviceAssociatedToken extends string,\n  TAccountOwner extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: ActivateDeviceInput<\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >,\n  config?: { programAddress?: TProgramAddress }\n): ActivateDeviceInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountToken2022Program,\n  TAccountAtaProgram,\n  TAccountPayer,\n  TAccountVendor,\n  TAccountProductMint,\n  TAccountProductAssociatedToken,\n  TAccountDevice,\n  TAccountDeviceMint,\n  TAccountDeviceAssociatedToken,\n  TAccountOwner\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    token2022Program: {\n      value: input.token2022Program ?? null,\n      isWritable: false,\n    },\n    ataProgram: { value: input.ataProgram ?? null, isWritable: false },\n    payer: { value: input.payer ?? null, isWritable: true },\n    vendor: { value: input.vendor ?? null, isWritable: false },\n    productMint: { value: input.productMint ?? null, isWritable: false },\n    productAssociatedToken: {\n      value: input.productAssociatedToken ?? null,\n      isWritable: false,\n    },\n    device: { value: input.device ?? null, isWritable: false },\n    deviceMint: { value: input.deviceMint ?? null, isWritable: true },\n    deviceAssociatedToken: {\n      value: input.deviceAssociatedToken ?? null,\n      isWritable: true,\n    },\n    owner: { value: input.owner ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.token2022Program.value) {\n    accounts.token2022Program.value =\n      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;\n  }\n  if (!accounts.ataProgram.value) {\n    accounts.ataProgram.value =\n      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.token2022Program),\n      getAccountMeta(accounts.ataProgram),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.vendor),\n      getAccountMeta(accounts.productMint),\n      getAccountMeta(accounts.productAssociatedToken),\n      getAccountMeta(accounts.device),\n      getAccountMeta(accounts.deviceMint),\n      getAccountMeta(accounts.deviceAssociatedToken),\n      getAccountMeta(accounts.owner),\n    ],\n    programAddress,\n    data: getActivateDeviceInstructionDataEncoder().encode(\n      args as ActivateDeviceInstructionDataArgs\n    ),\n  } as ActivateDeviceInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >;\n\n  return instruction;\n}\n\nexport type ParsedActivateDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The SPL Token 2022 program */\n    token2022Program: TAccountMetas[1];\n    /** The associated token program */\n    ataProgram: TAccountMetas[2];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[3];\n    /** The vendor */\n    vendor: TAccountMetas[4];\n    /** The mint account for the product */\n    productMint: TAccountMetas[5];\n    /** The associated token account for the product */\n    productAssociatedToken: TAccountMetas[6];\n    /** The device */\n    device: TAccountMetas[7];\n    /** The mint account for the device */\n    deviceMint: TAccountMetas[8];\n    /** The associated token account for the device */\n    deviceAssociatedToken: TAccountMetas[9];\n    /** The device's owner */\n    owner: TAccountMetas[10];\n  };\n  data: ActivateDeviceInstructionData;\n};\n\nexport function parseActivateDeviceInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedActivateDeviceInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 11) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      token2022Program: getNextAccount(),\n      ataProgram: getNextAccount(),\n      payer: getNextAccount(),\n      vendor: getNextAccount(),\n      productMint: getNextAccount(),\n      productAssociatedToken: getNextAccount(),\n      device: getNextAccount(),\n      deviceMint: getNextAccount(),\n      deviceAssociatedToken: getNextAccount(),\n      owner: getNextAccount(),\n    },\n    data: getActivateDeviceInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\nimport {\n  getCreateActivatedDeviceArgsDecoder,\n  getCreateActivatedDeviceArgsEncoder,\n  type CreateActivatedDeviceArgs,\n  type CreateActivatedDeviceArgsArgs,\n} from '../types';\n\nexport const CREATE_ACTIVATED_DEVICE_DISCRIMINATOR = 4;\n\nexport function getCreateActivatedDeviceDiscriminatorBytes() {\n  return getU8Encoder().encode(CREATE_ACTIVATED_DEVICE_DISCRIMINATOR);\n}\n\nexport type CreateActivatedDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountToken2022Program extends\n    | string\n    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',\n  TAccountAtaProgram extends\n    | string\n    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountVendor extends string | IAccountMeta<string> = string,\n  TAccountProductMint extends string | IAccountMeta<string> = string,\n  TAccountProductAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountDevice extends string | IAccountMeta<string> = string,\n  TAccountDeviceMint extends string | IAccountMeta<string> = string,\n  TAccountDeviceAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountOwner extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountToken2022Program extends string\n        ? ReadonlyAccount<TAccountToken2022Program>\n        : TAccountToken2022Program,\n      TAccountAtaProgram extends string\n        ? ReadonlyAccount<TAccountAtaProgram>\n        : TAccountAtaProgram,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountVendor extends string\n        ? ReadonlySignerAccount<TAccountVendor> &\n            IAccountSignerMeta<TAccountVendor>\n        : TAccountVendor,\n      TAccountProductMint extends string\n        ? WritableAccount<TAccountProductMint>\n        : TAccountProductMint,\n      TAccountProductAssociatedToken extends string\n        ? WritableAccount<TAccountProductAssociatedToken>\n        : TAccountProductAssociatedToken,\n      TAccountDevice extends string\n        ? ReadonlySignerAccount<TAccountDevice> &\n            IAccountSignerMeta<TAccountDevice>\n        : TAccountDevice,\n      TAccountDeviceMint extends string\n        ? WritableAccount<TAccountDeviceMint>\n        : TAccountDeviceMint,\n      TAccountDeviceAssociatedToken extends string\n        ? WritableAccount<TAccountDeviceAssociatedToken>\n        : TAccountDeviceAssociatedToken,\n      TAccountOwner extends string\n        ? ReadonlyAccount<TAccountOwner>\n        : TAccountOwner,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type CreateActivatedDeviceInstructionData = {\n  discriminator: number;\n  createActivatedDeviceArgs: CreateActivatedDeviceArgs;\n};\n\nexport type CreateActivatedDeviceInstructionDataArgs = {\n  createActivatedDeviceArgs: CreateActivatedDeviceArgsArgs;\n};\n\nexport function getCreateActivatedDeviceInstructionDataEncoder(): Encoder<CreateActivatedDeviceInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['createActivatedDeviceArgs', getCreateActivatedDeviceArgsEncoder()],\n    ]),\n    (value) => ({\n      ...value,\n      discriminator: CREATE_ACTIVATED_DEVICE_DISCRIMINATOR,\n    })\n  );\n}\n\nexport function getCreateActivatedDeviceInstructionDataDecoder(): Decoder<CreateActivatedDeviceInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['createActivatedDeviceArgs', getCreateActivatedDeviceArgsDecoder()],\n  ]);\n}\n\nexport function getCreateActivatedDeviceInstructionDataCodec(): Codec<\n  CreateActivatedDeviceInstructionDataArgs,\n  CreateActivatedDeviceInstructionData\n> {\n  return combineCodec(\n    getCreateActivatedDeviceInstructionDataEncoder(),\n    getCreateActivatedDeviceInstructionDataDecoder()\n  );\n}\n\nexport type CreateActivatedDeviceInput<\n  TAccountSystemProgram extends string = string,\n  TAccountToken2022Program extends string = string,\n  TAccountAtaProgram extends string = string,\n  TAccountPayer extends string = string,\n  TAccountVendor extends string = string,\n  TAccountProductMint extends string = string,\n  TAccountProductAssociatedToken extends string = string,\n  TAccountDevice extends string = string,\n  TAccountDeviceMint extends string = string,\n  TAccountDeviceAssociatedToken extends string = string,\n  TAccountOwner extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The SPL Token 2022 program */\n  token2022Program?: Address<TAccountToken2022Program>;\n  /** The associated token program */\n  ataProgram?: Address<TAccountAtaProgram>;\n  /** The account paying for the storage fees */\n  payer?: TransactionSigner<TAccountPayer>;\n  /** The vendor */\n  vendor: TransactionSigner<TAccountVendor>;\n  /** The mint account for the product */\n  productMint: Address<TAccountProductMint>;\n  /** The associated token account for the product */\n  productAssociatedToken: Address<TAccountProductAssociatedToken>;\n  /** The device */\n  device: TransactionSigner<TAccountDevice>;\n  /** The mint account for the device */\n  deviceMint: Address<TAccountDeviceMint>;\n  /** The associated token account for the device */\n  deviceAssociatedToken: Address<TAccountDeviceAssociatedToken>;\n  /** The device's owner */\n  owner: Address<TAccountOwner>;\n  createActivatedDeviceArgs: CreateActivatedDeviceInstructionDataArgs['createActivatedDeviceArgs'];\n};\n\nexport function getCreateActivatedDeviceInstruction<\n  TAccountSystemProgram extends string,\n  TAccountToken2022Program extends string,\n  TAccountAtaProgram extends string,\n  TAccountPayer extends string,\n  TAccountVendor extends string,\n  TAccountProductMint extends string,\n  TAccountProductAssociatedToken extends string,\n  TAccountDevice extends string,\n  TAccountDeviceMint extends string,\n  TAccountDeviceAssociatedToken extends string,\n  TAccountOwner extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: CreateActivatedDeviceInput<\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >,\n  config?: { programAddress?: TProgramAddress }\n): CreateActivatedDeviceInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountToken2022Program,\n  TAccountAtaProgram,\n  TAccountPayer,\n  TAccountVendor,\n  TAccountProductMint,\n  TAccountProductAssociatedToken,\n  TAccountDevice,\n  TAccountDeviceMint,\n  TAccountDeviceAssociatedToken,\n  TAccountOwner\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    token2022Program: {\n      value: input.token2022Program ?? null,\n      isWritable: false,\n    },\n    ataProgram: { value: input.ataProgram ?? null, isWritable: false },\n    payer: { value: input.payer ?? null, isWritable: true },\n    vendor: { value: input.vendor ?? null, isWritable: false },\n    productMint: { value: input.productMint ?? null, isWritable: true },\n    productAssociatedToken: {\n      value: input.productAssociatedToken ?? null,\n      isWritable: true,\n    },\n    device: { value: input.device ?? null, isWritable: false },\n    deviceMint: { value: input.deviceMint ?? null, isWritable: true },\n    deviceAssociatedToken: {\n      value: input.deviceAssociatedToken ?? null,\n      isWritable: true,\n    },\n    owner: { value: input.owner ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.token2022Program.value) {\n    accounts.token2022Program.value =\n      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;\n  }\n  if (!accounts.ataProgram.value) {\n    accounts.ataProgram.value =\n      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;\n  }\n  if (!accounts.payer.value) {\n    accounts.payer.value = expectSome(accounts.vendor.value);\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.token2022Program),\n      getAccountMeta(accounts.ataProgram),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.vendor),\n      getAccountMeta(accounts.productMint),\n      getAccountMeta(accounts.productAssociatedToken),\n      getAccountMeta(accounts.device),\n      getAccountMeta(accounts.deviceMint),\n      getAccountMeta(accounts.deviceAssociatedToken),\n      getAccountMeta(accounts.owner),\n    ],\n    programAddress,\n    data: getCreateActivatedDeviceInstructionDataEncoder().encode(\n      args as CreateActivatedDeviceInstructionDataArgs\n    ),\n  } as CreateActivatedDeviceInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >;\n\n  return instruction;\n}\n\nexport type ParsedCreateActivatedDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The SPL Token 2022 program */\n    token2022Program: TAccountMetas[1];\n    /** The associated token program */\n    ataProgram: TAccountMetas[2];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[3];\n    /** The vendor */\n    vendor: TAccountMetas[4];\n    /** The mint account for the product */\n    productMint: TAccountMetas[5];\n    /** The associated token account for the product */\n    productAssociatedToken: TAccountMetas[6];\n    /** The device */\n    device: TAccountMetas[7];\n    /** The mint account for the device */\n    deviceMint: TAccountMetas[8];\n    /** The associated token account for the device */\n    deviceAssociatedToken: TAccountMetas[9];\n    /** The device's owner */\n    owner: TAccountMetas[10];\n  };\n  data: CreateActivatedDeviceInstructionData;\n};\n\nexport function parseCreateActivatedDeviceInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedCreateActivatedDeviceInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 11) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      token2022Program: getNextAccount(),\n      ataProgram: getNextAccount(),\n      payer: getNextAccount(),\n      vendor: getNextAccount(),\n      productMint: getNextAccount(),\n      productAssociatedToken: getNextAccount(),\n      device: getNextAccount(),\n      deviceMint: getNextAccount(),\n      deviceAssociatedToken: getNextAccount(),\n      owner: getNextAccount(),\n    },\n    data: getCreateActivatedDeviceInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\nimport {\n  getCreateActivatedDeviceArgsDecoder,\n  getCreateActivatedDeviceArgsEncoder,\n  type CreateActivatedDeviceArgs,\n  type CreateActivatedDeviceArgsArgs,\n} from '../types';\n\nexport const CREATE_ACTIVATED_DEVICE_NON_SIGNER_DISCRIMINATOR = 5;\n\nexport function getCreateActivatedDeviceNonSignerDiscriminatorBytes() {\n  return getU8Encoder().encode(\n    CREATE_ACTIVATED_DEVICE_NON_SIGNER_DISCRIMINATOR\n  );\n}\n\nexport type CreateActivatedDeviceNonSignerInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountToken2022Program extends\n    | string\n    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',\n  TAccountAtaProgram extends\n    | string\n    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountVendor extends string | IAccountMeta<string> = string,\n  TAccountProductMint extends string | IAccountMeta<string> = string,\n  TAccountProductAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountDevice extends string | IAccountMeta<string> = string,\n  TAccountDeviceMint extends string | IAccountMeta<string> = string,\n  TAccountDeviceAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountOwner extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountToken2022Program extends string\n        ? ReadonlyAccount<TAccountToken2022Program>\n        : TAccountToken2022Program,\n      TAccountAtaProgram extends string\n        ? ReadonlyAccount<TAccountAtaProgram>\n        : TAccountAtaProgram,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountVendor extends string\n        ? ReadonlySignerAccount<TAccountVendor> &\n            IAccountSignerMeta<TAccountVendor>\n        : TAccountVendor,\n      TAccountProductMint extends string\n        ? WritableAccount<TAccountProductMint>\n        : TAccountProductMint,\n      TAccountProductAssociatedToken extends string\n        ? WritableAccount<TAccountProductAssociatedToken>\n        : TAccountProductAssociatedToken,\n      TAccountDevice extends string\n        ? ReadonlyAccount<TAccountDevice>\n        : TAccountDevice,\n      TAccountDeviceMint extends string\n        ? WritableAccount<TAccountDeviceMint>\n        : TAccountDeviceMint,\n      TAccountDeviceAssociatedToken extends string\n        ? WritableAccount<TAccountDeviceAssociatedToken>\n        : TAccountDeviceAssociatedToken,\n      TAccountOwner extends string\n        ? ReadonlyAccount<TAccountOwner>\n        : TAccountOwner,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type CreateActivatedDeviceNonSignerInstructionData = {\n  discriminator: number;\n  createActivatedDeviceArgs: CreateActivatedDeviceArgs;\n};\n\nexport type CreateActivatedDeviceNonSignerInstructionDataArgs = {\n  createActivatedDeviceArgs: CreateActivatedDeviceArgsArgs;\n};\n\nexport function getCreateActivatedDeviceNonSignerInstructionDataEncoder(): Encoder<CreateActivatedDeviceNonSignerInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['createActivatedDeviceArgs', getCreateActivatedDeviceArgsEncoder()],\n    ]),\n    (value) => ({\n      ...value,\n      discriminator: CREATE_ACTIVATED_DEVICE_NON_SIGNER_DISCRIMINATOR,\n    })\n  );\n}\n\nexport function getCreateActivatedDeviceNonSignerInstructionDataDecoder(): Decoder<CreateActivatedDeviceNonSignerInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['createActivatedDeviceArgs', getCreateActivatedDeviceArgsDecoder()],\n  ]);\n}\n\nexport function getCreateActivatedDeviceNonSignerInstructionDataCodec(): Codec<\n  CreateActivatedDeviceNonSignerInstructionDataArgs,\n  CreateActivatedDeviceNonSignerInstructionData\n> {\n  return combineCodec(\n    getCreateActivatedDeviceNonSignerInstructionDataEncoder(),\n    getCreateActivatedDeviceNonSignerInstructionDataDecoder()\n  );\n}\n\nexport type CreateActivatedDeviceNonSignerInput<\n  TAccountSystemProgram extends string = string,\n  TAccountToken2022Program extends string = string,\n  TAccountAtaProgram extends string = string,\n  TAccountPayer extends string = string,\n  TAccountVendor extends string = string,\n  TAccountProductMint extends string = string,\n  TAccountProductAssociatedToken extends string = string,\n  TAccountDevice extends string = string,\n  TAccountDeviceMint extends string = string,\n  TAccountDeviceAssociatedToken extends string = string,\n  TAccountOwner extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The SPL Token 2022 program */\n  token2022Program?: Address<TAccountToken2022Program>;\n  /** The associated token program */\n  ataProgram?: Address<TAccountAtaProgram>;\n  /** The account paying for the storage fees */\n  payer?: TransactionSigner<TAccountPayer>;\n  /** The vendor */\n  vendor: TransactionSigner<TAccountVendor>;\n  /** The mint account for the product */\n  productMint: Address<TAccountProductMint>;\n  /** The associated token account for the product */\n  productAssociatedToken: Address<TAccountProductAssociatedToken>;\n  /** The device */\n  device: Address<TAccountDevice>;\n  /** The mint account for the device */\n  deviceMint: Address<TAccountDeviceMint>;\n  /** The associated token account for the device */\n  deviceAssociatedToken: Address<TAccountDeviceAssociatedToken>;\n  /** The device's owner */\n  owner: Address<TAccountOwner>;\n  createActivatedDeviceArgs: CreateActivatedDeviceNonSignerInstructionDataArgs['createActivatedDeviceArgs'];\n};\n\nexport function getCreateActivatedDeviceNonSignerInstruction<\n  TAccountSystemProgram extends string,\n  TAccountToken2022Program extends string,\n  TAccountAtaProgram extends string,\n  TAccountPayer extends string,\n  TAccountVendor extends string,\n  TAccountProductMint extends string,\n  TAccountProductAssociatedToken extends string,\n  TAccountDevice extends string,\n  TAccountDeviceMint extends string,\n  TAccountDeviceAssociatedToken extends string,\n  TAccountOwner extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: CreateActivatedDeviceNonSignerInput<\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >,\n  config?: { programAddress?: TProgramAddress }\n): CreateActivatedDeviceNonSignerInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountToken2022Program,\n  TAccountAtaProgram,\n  TAccountPayer,\n  TAccountVendor,\n  TAccountProductMint,\n  TAccountProductAssociatedToken,\n  TAccountDevice,\n  TAccountDeviceMint,\n  TAccountDeviceAssociatedToken,\n  TAccountOwner\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    token2022Program: {\n      value: input.token2022Program ?? null,\n      isWritable: false,\n    },\n    ataProgram: { value: input.ataProgram ?? null, isWritable: false },\n    payer: { value: input.payer ?? null, isWritable: true },\n    vendor: { value: input.vendor ?? null, isWritable: false },\n    productMint: { value: input.productMint ?? null, isWritable: true },\n    productAssociatedToken: {\n      value: input.productAssociatedToken ?? null,\n      isWritable: true,\n    },\n    device: { value: input.device ?? null, isWritable: false },\n    deviceMint: { value: input.deviceMint ?? null, isWritable: true },\n    deviceAssociatedToken: {\n      value: input.deviceAssociatedToken ?? null,\n      isWritable: true,\n    },\n    owner: { value: input.owner ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.token2022Program.value) {\n    accounts.token2022Program.value =\n      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;\n  }\n  if (!accounts.ataProgram.value) {\n    accounts.ataProgram.value =\n      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;\n  }\n  if (!accounts.payer.value) {\n    accounts.payer.value = expectSome(accounts.vendor.value);\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.token2022Program),\n      getAccountMeta(accounts.ataProgram),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.vendor),\n      getAccountMeta(accounts.productMint),\n      getAccountMeta(accounts.productAssociatedToken),\n      getAccountMeta(accounts.device),\n      getAccountMeta(accounts.deviceMint),\n      getAccountMeta(accounts.deviceAssociatedToken),\n      getAccountMeta(accounts.owner),\n    ],\n    programAddress,\n    data: getCreateActivatedDeviceNonSignerInstructionDataEncoder().encode(\n      args as CreateActivatedDeviceNonSignerInstructionDataArgs\n    ),\n  } as CreateActivatedDeviceNonSignerInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint,\n    TAccountDeviceAssociatedToken,\n    TAccountOwner\n  >;\n\n  return instruction;\n}\n\nexport type ParsedCreateActivatedDeviceNonSignerInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The SPL Token 2022 program */\n    token2022Program: TAccountMetas[1];\n    /** The associated token program */\n    ataProgram: TAccountMetas[2];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[3];\n    /** The vendor */\n    vendor: TAccountMetas[4];\n    /** The mint account for the product */\n    productMint: TAccountMetas[5];\n    /** The associated token account for the product */\n    productAssociatedToken: TAccountMetas[6];\n    /** The device */\n    device: TAccountMetas[7];\n    /** The mint account for the device */\n    deviceMint: TAccountMetas[8];\n    /** The associated token account for the device */\n    deviceAssociatedToken: TAccountMetas[9];\n    /** The device's owner */\n    owner: TAccountMetas[10];\n  };\n  data: CreateActivatedDeviceNonSignerInstructionData;\n};\n\nexport function parseCreateActivatedDeviceNonSignerInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedCreateActivatedDeviceNonSignerInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 11) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      token2022Program: getNextAccount(),\n      ataProgram: getNextAccount(),\n      payer: getNextAccount(),\n      vendor: getNextAccount(),\n      productMint: getNextAccount(),\n      productAssociatedToken: getNextAccount(),\n      device: getNextAccount(),\n      deviceMint: getNextAccount(),\n      deviceAssociatedToken: getNextAccount(),\n      owner: getNextAccount(),\n    },\n    data: getCreateActivatedDeviceNonSignerInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  getArrayDecoder,\n  getArrayEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU8Decoder,\n  getU8Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\nimport {\n  getDeviceSigningAlgorithmDecoder,\n  getDeviceSigningAlgorithmEncoder,\n  type DeviceSigningAlgorithm,\n  type DeviceSigningAlgorithmArgs,\n} from '../types';\n\nexport const CREATE_DEVICE_DISCRIMINATOR = 2;\n\nexport function getCreateDeviceDiscriminatorBytes() {\n  return getU8Encoder().encode(CREATE_DEVICE_DISCRIMINATOR);\n}\n\nexport type CreateDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountToken2022Program extends\n    | string\n    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',\n  TAccountAtaProgram extends\n    | string\n    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountVendor extends string | IAccountMeta<string> = string,\n  TAccountProductMint extends string | IAccountMeta<string> = string,\n  TAccountProductAssociatedToken extends string | IAccountMeta<string> = string,\n  TAccountDevice extends string | IAccountMeta<string> = string,\n  TAccountDeviceMint extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountToken2022Program extends string\n        ? ReadonlyAccount<TAccountToken2022Program>\n        : TAccountToken2022Program,\n      TAccountAtaProgram extends string\n        ? ReadonlyAccount<TAccountAtaProgram>\n        : TAccountAtaProgram,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountVendor extends string\n        ? ReadonlySignerAccount<TAccountVendor> &\n            IAccountSignerMeta<TAccountVendor>\n        : TAccountVendor,\n      TAccountProductMint extends string\n        ? WritableAccount<TAccountProductMint>\n        : TAccountProductMint,\n      TAccountProductAssociatedToken extends string\n        ? WritableAccount<TAccountProductAssociatedToken>\n        : TAccountProductAssociatedToken,\n      TAccountDevice extends string\n        ? ReadonlyAccount<TAccountDevice>\n        : TAccountDevice,\n      TAccountDeviceMint extends string\n        ? WritableAccount<TAccountDeviceMint>\n        : TAccountDeviceMint,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type CreateDeviceInstructionData = {\n  discriminator: number;\n  name: string;\n  uri: string;\n  additionalMetadata: Array<readonly [string, string]>;\n  signingAlg: DeviceSigningAlgorithm;\n};\n\nexport type CreateDeviceInstructionDataArgs = {\n  name: string;\n  uri: string;\n  additionalMetadata: Array<readonly [string, string]>;\n  signingAlg: DeviceSigningAlgorithmArgs;\n};\n\nexport function getCreateDeviceInstructionDataEncoder(): Encoder<CreateDeviceInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      [\n        'additionalMetadata',\n        getArrayEncoder(\n          getTupleEncoder([\n            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n          ])\n        ),\n      ],\n      ['signingAlg', getDeviceSigningAlgorithmEncoder()],\n    ]),\n    (value) => ({ ...value, discriminator: CREATE_DEVICE_DISCRIMINATOR })\n  );\n}\n\nexport function getCreateDeviceInstructionDataDecoder(): Decoder<CreateDeviceInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    [\n      'additionalMetadata',\n      getArrayDecoder(\n        getTupleDecoder([\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n        ])\n      ),\n    ],\n    ['signingAlg', getDeviceSigningAlgorithmDecoder()],\n  ]);\n}\n\nexport function getCreateDeviceInstructionDataCodec(): Codec<\n  CreateDeviceInstructionDataArgs,\n  CreateDeviceInstructionData\n> {\n  return combineCodec(\n    getCreateDeviceInstructionDataEncoder(),\n    getCreateDeviceInstructionDataDecoder()\n  );\n}\n\nexport type CreateDeviceInput<\n  TAccountSystemProgram extends string = string,\n  TAccountToken2022Program extends string = string,\n  TAccountAtaProgram extends string = string,\n  TAccountPayer extends string = string,\n  TAccountVendor extends string = string,\n  TAccountProductMint extends string = string,\n  TAccountProductAssociatedToken extends string = string,\n  TAccountDevice extends string = string,\n  TAccountDeviceMint extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The SPL Token 2022 program */\n  token2022Program?: Address<TAccountToken2022Program>;\n  /** The associated token program */\n  ataProgram?: Address<TAccountAtaProgram>;\n  /** The account paying for the storage fees */\n  payer?: TransactionSigner<TAccountPayer>;\n  /** The vendor */\n  vendor: TransactionSigner<TAccountVendor>;\n  /** The mint account of the product */\n  productMint: Address<TAccountProductMint>;\n  /** The associated token account of the product */\n  productAssociatedToken: Address<TAccountProductAssociatedToken>;\n  /** The device */\n  device: Address<TAccountDevice>;\n  /** The mint account of the device */\n  deviceMint: Address<TAccountDeviceMint>;\n  name: CreateDeviceInstructionDataArgs['name'];\n  uri: CreateDeviceInstructionDataArgs['uri'];\n  additionalMetadata: CreateDeviceInstructionDataArgs['additionalMetadata'];\n  signingAlg: CreateDeviceInstructionDataArgs['signingAlg'];\n};\n\nexport function getCreateDeviceInstruction<\n  TAccountSystemProgram extends string,\n  TAccountToken2022Program extends string,\n  TAccountAtaProgram extends string,\n  TAccountPayer extends string,\n  TAccountVendor extends string,\n  TAccountProductMint extends string,\n  TAccountProductAssociatedToken extends string,\n  TAccountDevice extends string,\n  TAccountDeviceMint extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: CreateDeviceInput<\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint\n  >,\n  config?: { programAddress?: TProgramAddress }\n): CreateDeviceInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountToken2022Program,\n  TAccountAtaProgram,\n  TAccountPayer,\n  TAccountVendor,\n  TAccountProductMint,\n  TAccountProductAssociatedToken,\n  TAccountDevice,\n  TAccountDeviceMint\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    token2022Program: {\n      value: input.token2022Program ?? null,\n      isWritable: false,\n    },\n    ataProgram: { value: input.ataProgram ?? null, isWritable: false },\n    payer: { value: input.payer ?? null, isWritable: true },\n    vendor: { value: input.vendor ?? null, isWritable: false },\n    productMint: { value: input.productMint ?? null, isWritable: true },\n    productAssociatedToken: {\n      value: input.productAssociatedToken ?? null,\n      isWritable: true,\n    },\n    device: { value: input.device ?? null, isWritable: false },\n    deviceMint: { value: input.deviceMint ?? null, isWritable: true },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.token2022Program.value) {\n    accounts.token2022Program.value =\n      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;\n  }\n  if (!accounts.ataProgram.value) {\n    accounts.ataProgram.value =\n      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;\n  }\n  if (!accounts.payer.value) {\n    accounts.payer.value = expectSome(accounts.vendor.value);\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.token2022Program),\n      getAccountMeta(accounts.ataProgram),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.vendor),\n      getAccountMeta(accounts.productMint),\n      getAccountMeta(accounts.productAssociatedToken),\n      getAccountMeta(accounts.device),\n      getAccountMeta(accounts.deviceMint),\n    ],\n    programAddress,\n    data: getCreateDeviceInstructionDataEncoder().encode(\n      args as CreateDeviceInstructionDataArgs\n    ),\n  } as CreateDeviceInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountAtaProgram,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint,\n    TAccountProductAssociatedToken,\n    TAccountDevice,\n    TAccountDeviceMint\n  >;\n\n  return instruction;\n}\n\nexport type ParsedCreateDeviceInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The SPL Token 2022 program */\n    token2022Program: TAccountMetas[1];\n    /** The associated token program */\n    ataProgram: TAccountMetas[2];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[3];\n    /** The vendor */\n    vendor: TAccountMetas[4];\n    /** The mint account of the product */\n    productMint: TAccountMetas[5];\n    /** The associated token account of the product */\n    productAssociatedToken: TAccountMetas[6];\n    /** The device */\n    device: TAccountMetas[7];\n    /** The mint account of the device */\n    deviceMint: TAccountMetas[8];\n  };\n  data: CreateDeviceInstructionData;\n};\n\nexport function parseCreateDeviceInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedCreateDeviceInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 9) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      token2022Program: getNextAccount(),\n      ataProgram: getNextAccount(),\n      payer: getNextAccount(),\n      vendor: getNextAccount(),\n      productMint: getNextAccount(),\n      productAssociatedToken: getNextAccount(),\n      device: getNextAccount(),\n      deviceMint: getNextAccount(),\n    },\n    data: getCreateDeviceInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  getArrayDecoder,\n  getArrayEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getTupleDecoder,\n  getTupleEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getU8Decoder,\n  getU8Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport { getAccountMetaFactory, type ResolvedAccount } from '../shared';\n\nexport const CREATE_PRODUCT_DISCRIMINATOR = 1;\n\nexport function getCreateProductDiscriminatorBytes() {\n  return getU8Encoder().encode(CREATE_PRODUCT_DISCRIMINATOR);\n}\n\nexport type CreateProductInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountToken2022Program extends\n    | string\n    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountVendor extends string | IAccountMeta<string> = string,\n  TAccountProductMint extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountToken2022Program extends string\n        ? ReadonlyAccount<TAccountToken2022Program>\n        : TAccountToken2022Program,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountVendor extends string\n        ? ReadonlySignerAccount<TAccountVendor> &\n            IAccountSignerMeta<TAccountVendor>\n        : TAccountVendor,\n      TAccountProductMint extends string\n        ? WritableAccount<TAccountProductMint>\n        : TAccountProductMint,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type CreateProductInstructionData = {\n  discriminator: number;\n  name: string;\n  symbol: string;\n  uri: string;\n  additionalMetadata: Array<readonly [string, string]>;\n};\n\nexport type CreateProductInstructionDataArgs = {\n  name: string;\n  symbol: string;\n  uri: string;\n  additionalMetadata: Array<readonly [string, string]>;\n};\n\nexport function getCreateProductInstructionDataEncoder(): Encoder<CreateProductInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      [\n        'additionalMetadata',\n        getArrayEncoder(\n          getTupleEncoder([\n            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),\n          ])\n        ),\n      ],\n    ]),\n    (value) => ({ ...value, discriminator: CREATE_PRODUCT_DISCRIMINATOR })\n  );\n}\n\nexport function getCreateProductInstructionDataDecoder(): Decoder<CreateProductInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    [\n      'additionalMetadata',\n      getArrayDecoder(\n        getTupleDecoder([\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),\n        ])\n      ),\n    ],\n  ]);\n}\n\nexport function getCreateProductInstructionDataCodec(): Codec<\n  CreateProductInstructionDataArgs,\n  CreateProductInstructionData\n> {\n  return combineCodec(\n    getCreateProductInstructionDataEncoder(),\n    getCreateProductInstructionDataDecoder()\n  );\n}\n\nexport type CreateProductInput<\n  TAccountSystemProgram extends string = string,\n  TAccountToken2022Program extends string = string,\n  TAccountPayer extends string = string,\n  TAccountVendor extends string = string,\n  TAccountProductMint extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The SPL Token 2022 program */\n  token2022Program?: Address<TAccountToken2022Program>;\n  /** The account paying for the storage fees */\n  payer: TransactionSigner<TAccountPayer>;\n  /** The vendor */\n  vendor: TransactionSigner<TAccountVendor>;\n  /** The mint account of the product */\n  productMint: Address<TAccountProductMint>;\n  name: CreateProductInstructionDataArgs['name'];\n  symbol: CreateProductInstructionDataArgs['symbol'];\n  uri: CreateProductInstructionDataArgs['uri'];\n  additionalMetadata: CreateProductInstructionDataArgs['additionalMetadata'];\n};\n\nexport function getCreateProductInstruction<\n  TAccountSystemProgram extends string,\n  TAccountToken2022Program extends string,\n  TAccountPayer extends string,\n  TAccountVendor extends string,\n  TAccountProductMint extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: CreateProductInput<\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint\n  >,\n  config?: { programAddress?: TProgramAddress }\n): CreateProductInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountToken2022Program,\n  TAccountPayer,\n  TAccountVendor,\n  TAccountProductMint\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    token2022Program: {\n      value: input.token2022Program ?? null,\n      isWritable: false,\n    },\n    payer: { value: input.payer ?? null, isWritable: true },\n    vendor: { value: input.vendor ?? null, isWritable: false },\n    productMint: { value: input.productMint ?? null, isWritable: true },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.token2022Program.value) {\n    accounts.token2022Program.value =\n      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.token2022Program),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.vendor),\n      getAccountMeta(accounts.productMint),\n    ],\n    programAddress,\n    data: getCreateProductInstructionDataEncoder().encode(\n      args as CreateProductInstructionDataArgs\n    ),\n  } as CreateProductInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountToken2022Program,\n    TAccountPayer,\n    TAccountVendor,\n    TAccountProductMint\n  >;\n\n  return instruction;\n}\n\nexport type ParsedCreateProductInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The SPL Token 2022 program */\n    token2022Program: TAccountMetas[1];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[2];\n    /** The vendor */\n    vendor: TAccountMetas[3];\n    /** The mint account of the product */\n    productMint: TAccountMetas[4];\n  };\n  data: CreateProductInstructionData;\n};\n\nexport function parseCreateProductInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedCreateProductInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 5) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      token2022Program: getNextAccount(),\n      payer: getNextAccount(),\n      vendor: getNextAccount(),\n      productMint: getNextAccount(),\n    },\n    data: getCreateProductInstructionDataDecoder().decode(instruction.data),\n  };\n}\n","/**\n * This code was AUTOGENERATED using the kinobi library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun kinobi to update it.\n *\n * @see https://github.com/kinobi-so/kinobi\n */\n\nimport {\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getU8Decoder,\n  getU8Encoder,\n  transformEncoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IAccountSignerMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlySignerAccount,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/web3.js';\nimport { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\n\nexport const INITIALIZE_DISCRIMINATOR = 0;\n\nexport function getInitializeDiscriminatorBytes() {\n  return getU8Encoder().encode(INITIALIZE_DISCRIMINATOR);\n}\n\nexport type InitializeInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountSystemProgram extends\n    | string\n    | IAccountMeta<string> = '11111111111111111111111111111111',\n  TAccountPayer extends string | IAccountMeta<string> = string,\n  TAccountProgramData extends string | IAccountMeta<string> = string,\n  TAccountAuthority extends string | IAccountMeta<string> = string,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<\n    [\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      TAccountPayer extends string\n        ? WritableSignerAccount<TAccountPayer> &\n            IAccountSignerMeta<TAccountPayer>\n        : TAccountPayer,\n      TAccountProgramData extends string\n        ? WritableAccount<TAccountProgramData>\n        : TAccountProgramData,\n      TAccountAuthority extends string\n        ? ReadonlySignerAccount<TAccountAuthority> &\n            IAccountSignerMeta<TAccountAuthority>\n        : TAccountAuthority,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type InitializeInstructionData = { discriminator: number; bump: number };\n\nexport type InitializeInstructionDataArgs = { bump: number };\n\nexport function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', getU8Encoder()],\n      ['bump', getU8Encoder()],\n    ]),\n    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })\n  );\n}\n\nexport function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {\n  return getStructDecoder([\n    ['discriminator', getU8Decoder()],\n    ['bump', getU8Decoder()],\n  ]);\n}\n\nexport function getInitializeInstructionDataCodec(): Codec<\n  InitializeInstructionDataArgs,\n  InitializeInstructionData\n> {\n  return combineCodec(\n    getInitializeInstructionDataEncoder(),\n    getInitializeInstructionDataDecoder()\n  );\n}\n\nexport type InitializeInput<\n  TAccountSystemProgram extends string = string,\n  TAccountPayer extends string = string,\n  TAccountProgramData extends string = string,\n  TAccountAuthority extends string = string,\n> = {\n  /** The system program */\n  systemProgram?: Address<TAccountSystemProgram>;\n  /** The account paying for the storage fees */\n  payer?: TransactionSigner<TAccountPayer>;\n  /** The program data account for the program */\n  programData: Address<TAccountProgramData>;\n  /** The authority account of the program */\n  authority: TransactionSigner<TAccountAuthority>;\n  bump: InitializeInstructionDataArgs['bump'];\n};\n\nexport function getInitializeInstruction<\n  TAccountSystemProgram extends string,\n  TAccountPayer extends string,\n  TAccountProgramData extends string,\n  TAccountAuthority extends string,\n  TProgramAddress extends Address = typeof DEPHY_ID_PROGRAM_ADDRESS,\n>(\n  input: InitializeInput<\n    TAccountSystemProgram,\n    TAccountPayer,\n    TAccountProgramData,\n    TAccountAuthority\n  >,\n  config?: { programAddress?: TProgramAddress }\n): InitializeInstruction<\n  TProgramAddress,\n  TAccountSystemProgram,\n  TAccountPayer,\n  TAccountProgramData,\n  TAccountAuthority\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? DEPHY_ID_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n    payer: { value: input.payer ?? null, isWritable: true },\n    programData: { value: input.programData ?? null, isWritable: true },\n    authority: { value: input.authority ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n  if (!accounts.payer.value) {\n    accounts.payer.value = expectSome(accounts.authority.value);\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.systemProgram),\n      getAccountMeta(accounts.payer),\n      getAccountMeta(accounts.programData),\n      getAccountMeta(accounts.authority),\n    ],\n    programAddress,\n    data: getInitializeInstructionDataEncoder().encode(\n      args as InitializeInstructionDataArgs\n    ),\n  } as InitializeInstruction<\n    TProgramAddress,\n    TAccountSystemProgram,\n    TAccountPayer,\n    TAccountProgramData,\n    TAccountAuthority\n  >;\n\n  return instruction;\n}\n\nexport type ParsedInitializeInstruction<\n  TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    /** The system program */\n    systemProgram: TAccountMetas[0];\n    /** The account paying for the storage fees */\n    payer: TAccountMetas[1];\n    /** The program data account for the program */\n    programData: TAccountMetas[2];\n    /** The authority account of the program */\n    authority: TAccountMetas[3];\n  };\n  data: InitializeInstructionData;\n};\n\nexport function parseInitializeInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly IAccountMeta[],\n>(\n  instruction: IInstruction<TProgram> &\n    IInstructionWithAccounts<TAccountMetas> &\n    IInstructionWithData<Uint8Array>\n): ParsedInitializeInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 4) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      systemProgram: getNextAccount(),\n      payer: getNextAccount(),\n      programData: getNextAccount(),\n      authority: getNextAccount(),\n    },\n    data: getInitializeInstructionDataDecoder().decode(instruction.data),\n  };\n}\n"]}