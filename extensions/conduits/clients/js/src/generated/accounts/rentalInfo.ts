/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type RentalInfo = {
  key: Key;
  listingInfo: Address;
  tenant: Address;
  startTime: bigint;
  endTime: bigint;
  rentalDays: bigint;
  totalPaidRent: bigint;
};

export type RentalInfoArgs = {
  key: KeyArgs;
  listingInfo: Address;
  tenant: Address;
  startTime: number | bigint;
  endTime: number | bigint;
  rentalDays: number | bigint;
  totalPaidRent: number | bigint;
};

export function getRentalInfoEncoder(): Encoder<RentalInfoArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['listingInfo', getAddressEncoder()],
    ['tenant', getAddressEncoder()],
    ['startTime', getU64Encoder()],
    ['endTime', getU64Encoder()],
    ['rentalDays', getU64Encoder()],
    ['totalPaidRent', getU64Encoder()],
  ]);
}

export function getRentalInfoDecoder(): Decoder<RentalInfo> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['listingInfo', getAddressDecoder()],
    ['tenant', getAddressDecoder()],
    ['startTime', getU64Decoder()],
    ['endTime', getU64Decoder()],
    ['rentalDays', getU64Decoder()],
    ['totalPaidRent', getU64Decoder()],
  ]);
}

export function getRentalInfoCodec(): Codec<RentalInfoArgs, RentalInfo> {
  return combineCodec(getRentalInfoEncoder(), getRentalInfoDecoder());
}

export function decodeRentalInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RentalInfo, TAddress>;
export function decodeRentalInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RentalInfo, TAddress>;
export function decodeRentalInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RentalInfo, TAddress> | MaybeAccount<RentalInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRentalInfoDecoder()
  );
}

export async function fetchRentalInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RentalInfo, TAddress>> {
  const maybeAccount = await fetchMaybeRentalInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRentalInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RentalInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRentalInfo(maybeAccount);
}

export async function fetchAllRentalInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RentalInfo>[]> {
  const maybeAccounts = await fetchAllMaybeRentalInfo(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRentalInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RentalInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRentalInfo(maybeAccount));
}

export function getRentalInfoSize(): number {
  return 97;
}
