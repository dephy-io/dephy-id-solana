/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { getKeyDecoder, getKeyEncoder, type Key, type KeyArgs } from '../types';

export type ListingInfo = {
  key: Key;
  appAccount: Address;
  device: Address;
  rentTokenMint: Address;
  minRentalDays: bigint;
  maxRentalDays: bigint;
  rentPerDay: bigint;
  renting: boolean;
};

export type ListingInfoArgs = {
  key: KeyArgs;
  appAccount: Address;
  device: Address;
  rentTokenMint: Address;
  minRentalDays: number | bigint;
  maxRentalDays: number | bigint;
  rentPerDay: number | bigint;
  renting: boolean;
};

export function getListingInfoEncoder(): Encoder<ListingInfoArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['appAccount', getAddressEncoder()],
    ['device', getAddressEncoder()],
    ['rentTokenMint', getAddressEncoder()],
    ['minRentalDays', getU64Encoder()],
    ['maxRentalDays', getU64Encoder()],
    ['rentPerDay', getU64Encoder()],
    ['renting', getBooleanEncoder()],
  ]);
}

export function getListingInfoDecoder(): Decoder<ListingInfo> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['appAccount', getAddressDecoder()],
    ['device', getAddressDecoder()],
    ['rentTokenMint', getAddressDecoder()],
    ['minRentalDays', getU64Decoder()],
    ['maxRentalDays', getU64Decoder()],
    ['rentPerDay', getU64Decoder()],
    ['renting', getBooleanDecoder()],
  ]);
}

export function getListingInfoCodec(): Codec<ListingInfoArgs, ListingInfo> {
  return combineCodec(getListingInfoEncoder(), getListingInfoDecoder());
}

export function decodeListingInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ListingInfo, TAddress>;
export function decodeListingInfo<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ListingInfo, TAddress>;
export function decodeListingInfo<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ListingInfo, TAddress> | MaybeAccount<ListingInfo, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getListingInfoDecoder()
  );
}

export async function fetchListingInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ListingInfo, TAddress>> {
  const maybeAccount = await fetchMaybeListingInfo(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeListingInfo<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ListingInfo, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeListingInfo(maybeAccount);
}

export async function fetchAllListingInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ListingInfo>[]> {
  const maybeAccounts = await fetchAllMaybeListingInfo(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeListingInfo(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ListingInfo>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeListingInfo(maybeAccount));
}

export function getListingInfoSize(): number {
  return 122;
}
