/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type InitAppInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountAppAccount extends string | IAccountMeta<string> = string,
  TAccountAppMint extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAppAccount extends string
        ? WritableAccount<TAccountAppAccount>
        : TAccountAppAccount,
      TAccountAppMint extends string
        ? WritableAccount<TAccountAppMint>
        : TAccountAppMint,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitAppInstructionData = {
  discriminator: number;
  name: string;
  symbol: string;
  uri: string;
  additionalMetadata: Array<readonly [string, string]>;
};

export type InitAppInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
  additionalMetadata: Array<readonly [string, string]>;
};

export function getInitAppInstructionDataEncoder(): Encoder<InitAppInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'additionalMetadata',
        getArrayEncoder(
          getTupleEncoder([
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          ])
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getInitAppInstructionDataDecoder(): Decoder<InitAppInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'additionalMetadata',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        ])
      ),
    ],
  ]);
}

export function getInitAppInstructionDataCodec(): Codec<
  InitAppInstructionDataArgs,
  InitAppInstructionData
> {
  return combineCodec(
    getInitAppInstructionDataEncoder(),
    getInitAppInstructionDataDecoder()
  );
}

export type InitAppInput<
  TAccountAppAccount extends string = string,
  TAccountAppMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The account for the app */
  appAccount: Address<TAccountAppAccount>;
  /** The template mint account for the app */
  appMint: Address<TAccountAppMint>;
  /** The authority of the new app */
  authority: TransactionSigner<TAccountAuthority>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The SPL Token program */
  token2022Program: Address<TAccountToken2022Program>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitAppInstructionDataArgs['name'];
  symbol: InitAppInstructionDataArgs['symbol'];
  uri: InitAppInstructionDataArgs['uri'];
  additionalMetadata: InitAppInstructionDataArgs['additionalMetadata'];
};

export function getInitAppInstruction<
  TAccountAppAccount extends string,
  TAccountAppMint extends string,
  TAccountAuthority extends string,
  TAccountPayer extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
>(
  input: InitAppInput<
    TAccountAppAccount,
    TAccountAppMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountToken2022Program,
    TAccountSystemProgram
  >
): InitAppInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountAppAccount,
  TAccountAppMint,
  TAccountAuthority,
  TAccountPayer,
  TAccountToken2022Program,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    appAccount: { value: input.appAccount ?? null, isWritable: true },
    appMint: { value: input.appMint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.appAccount),
      getAccountMeta(accounts.appMint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitAppInstructionDataEncoder().encode(
      args as InitAppInstructionDataArgs
    ),
  } as InitAppInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountAppAccount,
    TAccountAppMint,
    TAccountAuthority,
    TAccountPayer,
    TAccountToken2022Program,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitAppInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The account for the app */
    appAccount: TAccountMetas[0];
    /** The template mint account for the app */
    appMint: TAccountMetas[1];
    /** The authority of the new app */
    authority: TAccountMetas[2];
    /** The account paying for the storage fees */
    payer: TAccountMetas[3];
    /** The SPL Token program */
    token2022Program: TAccountMetas[4];
    /** The system program */
    systemProgram: TAccountMetas[5];
  };
  data: InitAppInstructionData;
};

export function parseInitAppInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitAppInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      appAccount: getNextAccount(),
      appMint: getNextAccount(),
      authority: getNextAccount(),
      payer: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitAppInstructionDataDecoder().decode(instruction.data),
  };
}
