/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type PayRentInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountRentalInfo extends string | IAccountMeta<string> = string,
  TAccountListingInfo extends string | IAccountMeta<string> = string,
  TAccountTenant extends string | IAccountMeta<string> = string,
  TAccountRentTokenMint extends string | IAccountMeta<string> = string,
  TAccountRentTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRentTokenSrc extends string | IAccountMeta<string> = string,
  TAccountRentTokenEscrow extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountAtaProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRentalInfo extends string
        ? WritableAccount<TAccountRentalInfo>
        : TAccountRentalInfo,
      TAccountListingInfo extends string
        ? ReadonlyAccount<TAccountListingInfo>
        : TAccountListingInfo,
      TAccountTenant extends string
        ? ReadonlySignerAccount<TAccountTenant> &
            IAccountSignerMeta<TAccountTenant>
        : TAccountTenant,
      TAccountRentTokenMint extends string
        ? ReadonlyAccount<TAccountRentTokenMint>
        : TAccountRentTokenMint,
      TAccountRentTokenProgram extends string
        ? ReadonlyAccount<TAccountRentTokenProgram>
        : TAccountRentTokenProgram,
      TAccountRentTokenSrc extends string
        ? WritableAccount<TAccountRentTokenSrc>
        : TAccountRentTokenSrc,
      TAccountRentTokenEscrow extends string
        ? WritableAccount<TAccountRentTokenEscrow>
        : TAccountRentTokenEscrow,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountAtaProgram extends string
        ? ReadonlyAccount<TAccountAtaProgram>
        : TAccountAtaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PayRentInstructionData = {
  discriminator: number;
  rentAmount: bigint;
};

export type PayRentInstructionDataArgs = { rentAmount: number | bigint };

export function getPayRentInstructionDataEncoder(): Encoder<PayRentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['rentAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 5 })
  );
}

export function getPayRentInstructionDataDecoder(): Decoder<PayRentInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['rentAmount', getU64Decoder()],
  ]);
}

export function getPayRentInstructionDataCodec(): Codec<
  PayRentInstructionDataArgs,
  PayRentInstructionData
> {
  return combineCodec(
    getPayRentInstructionDataEncoder(),
    getPayRentInstructionDataDecoder()
  );
}

export type PayRentInput<
  TAccountRentalInfo extends string = string,
  TAccountListingInfo extends string = string,
  TAccountTenant extends string = string,
  TAccountRentTokenMint extends string = string,
  TAccountRentTokenProgram extends string = string,
  TAccountRentTokenSrc extends string = string,
  TAccountRentTokenEscrow extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountAtaProgram extends string = string,
> = {
  /** The rental info account */
  rentalInfo: Address<TAccountRentalInfo>;
  /** The listing info account */
  listingInfo: Address<TAccountListingInfo>;
  /** The tenant account */
  tenant: TransactionSigner<TAccountTenant>;
  /** The rent token */
  rentTokenMint: Address<TAccountRentTokenMint>;
  /** The token program for rent token */
  rentTokenProgram: Address<TAccountRentTokenProgram>;
  /** The source account for rent payment */
  rentTokenSrc: Address<TAccountRentTokenSrc>;
  /** The destination account for rent payment */
  rentTokenEscrow: Address<TAccountRentTokenEscrow>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Token 2022 program */
  token2022Program: Address<TAccountToken2022Program>;
  /** The associated token program */
  ataProgram?: Address<TAccountAtaProgram>;
  rentAmount: PayRentInstructionDataArgs['rentAmount'];
};

export function getPayRentInstruction<
  TAccountRentalInfo extends string,
  TAccountListingInfo extends string,
  TAccountTenant extends string,
  TAccountRentTokenMint extends string,
  TAccountRentTokenProgram extends string,
  TAccountRentTokenSrc extends string,
  TAccountRentTokenEscrow extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
  TAccountAtaProgram extends string,
>(
  input: PayRentInput<
    TAccountRentalInfo,
    TAccountListingInfo,
    TAccountTenant,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenSrc,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >
): PayRentInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountRentalInfo,
  TAccountListingInfo,
  TAccountTenant,
  TAccountRentTokenMint,
  TAccountRentTokenProgram,
  TAccountRentTokenSrc,
  TAccountRentTokenEscrow,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountToken2022Program,
  TAccountAtaProgram
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rentalInfo: { value: input.rentalInfo ?? null, isWritable: true },
    listingInfo: { value: input.listingInfo ?? null, isWritable: false },
    tenant: { value: input.tenant ?? null, isWritable: false },
    rentTokenMint: { value: input.rentTokenMint ?? null, isWritable: false },
    rentTokenProgram: {
      value: input.rentTokenProgram ?? null,
      isWritable: false,
    },
    rentTokenSrc: { value: input.rentTokenSrc ?? null, isWritable: true },
    rentTokenEscrow: { value: input.rentTokenEscrow ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    ataProgram: { value: input.ataProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.ataProgram.value) {
    accounts.ataProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rentalInfo),
      getAccountMeta(accounts.listingInfo),
      getAccountMeta(accounts.tenant),
      getAccountMeta(accounts.rentTokenMint),
      getAccountMeta(accounts.rentTokenProgram),
      getAccountMeta(accounts.rentTokenSrc),
      getAccountMeta(accounts.rentTokenEscrow),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.ataProgram),
    ],
    programAddress,
    data: getPayRentInstructionDataEncoder().encode(
      args as PayRentInstructionDataArgs
    ),
  } as PayRentInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountRentalInfo,
    TAccountListingInfo,
    TAccountTenant,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenSrc,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >;

  return instruction;
}

export type ParsedPayRentInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The rental info account */
    rentalInfo: TAccountMetas[0];
    /** The listing info account */
    listingInfo: TAccountMetas[1];
    /** The tenant account */
    tenant: TAccountMetas[2];
    /** The rent token */
    rentTokenMint: TAccountMetas[3];
    /** The token program for rent token */
    rentTokenProgram: TAccountMetas[4];
    /** The source account for rent payment */
    rentTokenSrc: TAccountMetas[5];
    /** The destination account for rent payment */
    rentTokenEscrow: TAccountMetas[6];
    /** The account paying for the storage fees */
    payer: TAccountMetas[7];
    /** The system program */
    systemProgram: TAccountMetas[8];
    /** The SPL Token 2022 program */
    token2022Program: TAccountMetas[9];
    /** The associated token program */
    ataProgram: TAccountMetas[10];
  };
  data: PayRentInstructionData;
};

export function parsePayRentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPayRentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rentalInfo: getNextAccount(),
      listingInfo: getNextAccount(),
      tenant: getNextAccount(),
      rentTokenMint: getNextAccount(),
      rentTokenProgram: getNextAccount(),
      rentTokenSrc: getNextAccount(),
      rentTokenEscrow: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      ataProgram: getNextAccount(),
    },
    data: getPayRentInstructionDataDecoder().decode(instruction.data),
  };
}
