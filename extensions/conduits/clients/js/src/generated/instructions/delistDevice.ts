/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type DelistDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo extends string | IAccountMeta<string> = string,
  TAccountAppAccount extends string | IAccountMeta<string> = string,
  TAccountDevice extends string | IAccountMeta<string> = string,
  TAccountRentTokenMint extends string | IAccountMeta<string> = string,
  TAccountRentTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRentTokenEscrow extends string | IAccountMeta<string> = string,
  TAccountRentTokenDst extends string | IAccountMeta<string> = string,
  TAccountDeviceOwner extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountAtaProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListingInfo extends string
        ? WritableAccount<TAccountListingInfo>
        : TAccountListingInfo,
      TAccountAppAccount extends string
        ? ReadonlyAccount<TAccountAppAccount>
        : TAccountAppAccount,
      TAccountDevice extends string
        ? ReadonlyAccount<TAccountDevice>
        : TAccountDevice,
      TAccountRentTokenMint extends string
        ? ReadonlyAccount<TAccountRentTokenMint>
        : TAccountRentTokenMint,
      TAccountRentTokenProgram extends string
        ? ReadonlyAccount<TAccountRentTokenProgram>
        : TAccountRentTokenProgram,
      TAccountRentTokenEscrow extends string
        ? WritableAccount<TAccountRentTokenEscrow>
        : TAccountRentTokenEscrow,
      TAccountRentTokenDst extends string
        ? WritableAccount<TAccountRentTokenDst>
        : TAccountRentTokenDst,
      TAccountDeviceOwner extends string
        ? WritableSignerAccount<TAccountDeviceOwner> &
            IAccountSignerMeta<TAccountDeviceOwner>
        : TAccountDeviceOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountAtaProgram extends string
        ? ReadonlyAccount<TAccountAtaProgram>
        : TAccountAtaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DelistDeviceInstructionData = { discriminator: number };

export type DelistDeviceInstructionDataArgs = {};

export function getDelistDeviceInstructionDataEncoder(): Encoder<DelistDeviceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 3 })
  );
}

export function getDelistDeviceInstructionDataDecoder(): Decoder<DelistDeviceInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getDelistDeviceInstructionDataCodec(): Codec<
  DelistDeviceInstructionDataArgs,
  DelistDeviceInstructionData
> {
  return combineCodec(
    getDelistDeviceInstructionDataEncoder(),
    getDelistDeviceInstructionDataDecoder()
  );
}

export type DelistDeviceInput<
  TAccountListingInfo extends string = string,
  TAccountAppAccount extends string = string,
  TAccountDevice extends string = string,
  TAccountRentTokenMint extends string = string,
  TAccountRentTokenProgram extends string = string,
  TAccountRentTokenEscrow extends string = string,
  TAccountRentTokenDst extends string = string,
  TAccountDeviceOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountAtaProgram extends string = string,
> = {
  /** The listing info account */
  listingInfo: Address<TAccountListingInfo>;
  /** The app account */
  appAccount: Address<TAccountAppAccount>;
  /** The device account */
  device: Address<TAccountDevice>;
  /** The rent token mint */
  rentTokenMint: Address<TAccountRentTokenMint>;
  /** The token program for rent token */
  rentTokenProgram: Address<TAccountRentTokenProgram>;
  /** The destination account for rent token */
  rentTokenEscrow: Address<TAccountRentTokenEscrow>;
  /** The destination account for rent token */
  rentTokenDst: Address<TAccountRentTokenDst>;
  /** The device owner */
  deviceOwner: TransactionSigner<TAccountDeviceOwner>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Token 2022 program */
  token2022Program: Address<TAccountToken2022Program>;
  /** The associated token program */
  ataProgram?: Address<TAccountAtaProgram>;
};

export function getDelistDeviceInstruction<
  TAccountListingInfo extends string,
  TAccountAppAccount extends string,
  TAccountDevice extends string,
  TAccountRentTokenMint extends string,
  TAccountRentTokenProgram extends string,
  TAccountRentTokenEscrow extends string,
  TAccountRentTokenDst extends string,
  TAccountDeviceOwner extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
  TAccountAtaProgram extends string,
>(
  input: DelistDeviceInput<
    TAccountListingInfo,
    TAccountAppAccount,
    TAccountDevice,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenEscrow,
    TAccountRentTokenDst,
    TAccountDeviceOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >
): DelistDeviceInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo,
  TAccountAppAccount,
  TAccountDevice,
  TAccountRentTokenMint,
  TAccountRentTokenProgram,
  TAccountRentTokenEscrow,
  TAccountRentTokenDst,
  TAccountDeviceOwner,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountToken2022Program,
  TAccountAtaProgram
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    listingInfo: { value: input.listingInfo ?? null, isWritable: true },
    appAccount: { value: input.appAccount ?? null, isWritable: false },
    device: { value: input.device ?? null, isWritable: false },
    rentTokenMint: { value: input.rentTokenMint ?? null, isWritable: false },
    rentTokenProgram: {
      value: input.rentTokenProgram ?? null,
      isWritable: false,
    },
    rentTokenEscrow: { value: input.rentTokenEscrow ?? null, isWritable: true },
    rentTokenDst: { value: input.rentTokenDst ?? null, isWritable: true },
    deviceOwner: { value: input.deviceOwner ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    ataProgram: { value: input.ataProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.ataProgram.value) {
    accounts.ataProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.listingInfo),
      getAccountMeta(accounts.appAccount),
      getAccountMeta(accounts.device),
      getAccountMeta(accounts.rentTokenMint),
      getAccountMeta(accounts.rentTokenProgram),
      getAccountMeta(accounts.rentTokenEscrow),
      getAccountMeta(accounts.rentTokenDst),
      getAccountMeta(accounts.deviceOwner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.ataProgram),
    ],
    programAddress,
    data: getDelistDeviceInstructionDataEncoder().encode({}),
  } as DelistDeviceInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountListingInfo,
    TAccountAppAccount,
    TAccountDevice,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenEscrow,
    TAccountRentTokenDst,
    TAccountDeviceOwner,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >;

  return instruction;
}

export type ParsedDelistDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The listing info account */
    listingInfo: TAccountMetas[0];
    /** The app account */
    appAccount: TAccountMetas[1];
    /** The device account */
    device: TAccountMetas[2];
    /** The rent token mint */
    rentTokenMint: TAccountMetas[3];
    /** The token program for rent token */
    rentTokenProgram: TAccountMetas[4];
    /** The destination account for rent token */
    rentTokenEscrow: TAccountMetas[5];
    /** The destination account for rent token */
    rentTokenDst: TAccountMetas[6];
    /** The device owner */
    deviceOwner: TAccountMetas[7];
    /** The account paying for the storage fees */
    payer: TAccountMetas[8];
    /** The system program */
    systemProgram: TAccountMetas[9];
    /** The SPL Token 2022 program */
    token2022Program: TAccountMetas[10];
    /** The associated token program */
    ataProgram: TAccountMetas[11];
  };
  data: DelistDeviceInstructionData;
};

export function parseDelistDeviceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDelistDeviceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listingInfo: getNextAccount(),
      appAccount: getNextAccount(),
      device: getNextAccount(),
      rentTokenMint: getNextAccount(),
      rentTokenProgram: getNextAccount(),
      rentTokenEscrow: getNextAccount(),
      rentTokenDst: getNextAccount(),
      deviceOwner: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      ataProgram: getNextAccount(),
    },
    data: getDelistDeviceInstructionDataDecoder().decode(instruction.data),
  };
}
