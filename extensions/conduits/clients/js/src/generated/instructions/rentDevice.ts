/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type RentDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo extends string | IAccountMeta<string> = string,
  TAccountRentalInfo extends string | IAccountMeta<string> = string,
  TAccountAppAccount extends string | IAccountMeta<string> = string,
  TAccountAppMint extends string | IAccountMeta<string> = string,
  TAccountDevice extends string | IAccountMeta<string> = string,
  TAccountTenant extends string | IAccountMeta<string> = string,
  TAccountAccessIdentityMint extends string | IAccountMeta<string> = string,
  TAccountAccessIdentityAtoken extends string | IAccountMeta<string> = string,
  TAccountRentTokenMint extends string | IAccountMeta<string> = string,
  TAccountRentTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRentTokenSrc extends string | IAccountMeta<string> = string,
  TAccountRentTokenEscrow extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountAtaProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListingInfo extends string
        ? WritableAccount<TAccountListingInfo>
        : TAccountListingInfo,
      TAccountRentalInfo extends string
        ? WritableAccount<TAccountRentalInfo>
        : TAccountRentalInfo,
      TAccountAppAccount extends string
        ? ReadonlyAccount<TAccountAppAccount>
        : TAccountAppAccount,
      TAccountAppMint extends string
        ? ReadonlyAccount<TAccountAppMint>
        : TAccountAppMint,
      TAccountDevice extends string
        ? ReadonlyAccount<TAccountDevice>
        : TAccountDevice,
      TAccountTenant extends string
        ? ReadonlySignerAccount<TAccountTenant> &
            IAccountSignerMeta<TAccountTenant>
        : TAccountTenant,
      TAccountAccessIdentityMint extends string
        ? WritableAccount<TAccountAccessIdentityMint>
        : TAccountAccessIdentityMint,
      TAccountAccessIdentityAtoken extends string
        ? WritableAccount<TAccountAccessIdentityAtoken>
        : TAccountAccessIdentityAtoken,
      TAccountRentTokenMint extends string
        ? ReadonlyAccount<TAccountRentTokenMint>
        : TAccountRentTokenMint,
      TAccountRentTokenProgram extends string
        ? ReadonlyAccount<TAccountRentTokenProgram>
        : TAccountRentTokenProgram,
      TAccountRentTokenSrc extends string
        ? WritableAccount<TAccountRentTokenSrc>
        : TAccountRentTokenSrc,
      TAccountRentTokenEscrow extends string
        ? WritableAccount<TAccountRentTokenEscrow>
        : TAccountRentTokenEscrow,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountAtaProgram extends string
        ? ReadonlyAccount<TAccountAtaProgram>
        : TAccountAtaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RentDeviceInstructionData = {
  discriminator: number;
  rentalDays: bigint;
  prepaidRent: bigint;
};

export type RentDeviceInstructionDataArgs = {
  rentalDays: number | bigint;
  prepaidRent: number | bigint;
};

export function getRentDeviceInstructionDataEncoder(): Encoder<RentDeviceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['rentalDays', getU64Encoder()],
      ['prepaidRent', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 4 })
  );
}

export function getRentDeviceInstructionDataDecoder(): Decoder<RentDeviceInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['rentalDays', getU64Decoder()],
    ['prepaidRent', getU64Decoder()],
  ]);
}

export function getRentDeviceInstructionDataCodec(): Codec<
  RentDeviceInstructionDataArgs,
  RentDeviceInstructionData
> {
  return combineCodec(
    getRentDeviceInstructionDataEncoder(),
    getRentDeviceInstructionDataDecoder()
  );
}

export type RentDeviceInput<
  TAccountListingInfo extends string = string,
  TAccountRentalInfo extends string = string,
  TAccountAppAccount extends string = string,
  TAccountAppMint extends string = string,
  TAccountDevice extends string = string,
  TAccountTenant extends string = string,
  TAccountAccessIdentityMint extends string = string,
  TAccountAccessIdentityAtoken extends string = string,
  TAccountRentTokenMint extends string = string,
  TAccountRentTokenProgram extends string = string,
  TAccountRentTokenSrc extends string = string,
  TAccountRentTokenEscrow extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountAtaProgram extends string = string,
> = {
  /** The listing info account */
  listingInfo: Address<TAccountListingInfo>;
  /** The PDA of the rental agreement account to create */
  rentalInfo: Address<TAccountRentalInfo>;
  /** The app account */
  appAccount: Address<TAccountAppAccount>;
  /** The template mint account for the app */
  appMint: Address<TAccountAppMint>;
  /** The device account */
  device: Address<TAccountDevice>;
  /** The tenant account */
  tenant: TransactionSigner<TAccountTenant>;
  /** The mint account for the access identity */
  accessIdentityMint: Address<TAccountAccessIdentityMint>;
  /** The associated token account for the access identity */
  accessIdentityAtoken: Address<TAccountAccessIdentityAtoken>;
  /** The rent token */
  rentTokenMint: Address<TAccountRentTokenMint>;
  /** The token program for rent token */
  rentTokenProgram: Address<TAccountRentTokenProgram>;
  /** The source account for rent payment */
  rentTokenSrc: Address<TAccountRentTokenSrc>;
  /** The destination account for rent payment */
  rentTokenEscrow: Address<TAccountRentTokenEscrow>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Token 2022 program */
  token2022Program: Address<TAccountToken2022Program>;
  /** The associated token program */
  ataProgram?: Address<TAccountAtaProgram>;
  rentalDays: RentDeviceInstructionDataArgs['rentalDays'];
  prepaidRent: RentDeviceInstructionDataArgs['prepaidRent'];
};

export function getRentDeviceInstruction<
  TAccountListingInfo extends string,
  TAccountRentalInfo extends string,
  TAccountAppAccount extends string,
  TAccountAppMint extends string,
  TAccountDevice extends string,
  TAccountTenant extends string,
  TAccountAccessIdentityMint extends string,
  TAccountAccessIdentityAtoken extends string,
  TAccountRentTokenMint extends string,
  TAccountRentTokenProgram extends string,
  TAccountRentTokenSrc extends string,
  TAccountRentTokenEscrow extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
  TAccountAtaProgram extends string,
>(
  input: RentDeviceInput<
    TAccountListingInfo,
    TAccountRentalInfo,
    TAccountAppAccount,
    TAccountAppMint,
    TAccountDevice,
    TAccountTenant,
    TAccountAccessIdentityMint,
    TAccountAccessIdentityAtoken,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenSrc,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >
): RentDeviceInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo,
  TAccountRentalInfo,
  TAccountAppAccount,
  TAccountAppMint,
  TAccountDevice,
  TAccountTenant,
  TAccountAccessIdentityMint,
  TAccountAccessIdentityAtoken,
  TAccountRentTokenMint,
  TAccountRentTokenProgram,
  TAccountRentTokenSrc,
  TAccountRentTokenEscrow,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountToken2022Program,
  TAccountAtaProgram
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    listingInfo: { value: input.listingInfo ?? null, isWritable: true },
    rentalInfo: { value: input.rentalInfo ?? null, isWritable: true },
    appAccount: { value: input.appAccount ?? null, isWritable: false },
    appMint: { value: input.appMint ?? null, isWritable: false },
    device: { value: input.device ?? null, isWritable: false },
    tenant: { value: input.tenant ?? null, isWritable: false },
    accessIdentityMint: {
      value: input.accessIdentityMint ?? null,
      isWritable: true,
    },
    accessIdentityAtoken: {
      value: input.accessIdentityAtoken ?? null,
      isWritable: true,
    },
    rentTokenMint: { value: input.rentTokenMint ?? null, isWritable: false },
    rentTokenProgram: {
      value: input.rentTokenProgram ?? null,
      isWritable: false,
    },
    rentTokenSrc: { value: input.rentTokenSrc ?? null, isWritable: true },
    rentTokenEscrow: { value: input.rentTokenEscrow ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    ataProgram: { value: input.ataProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.ataProgram.value) {
    accounts.ataProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.listingInfo),
      getAccountMeta(accounts.rentalInfo),
      getAccountMeta(accounts.appAccount),
      getAccountMeta(accounts.appMint),
      getAccountMeta(accounts.device),
      getAccountMeta(accounts.tenant),
      getAccountMeta(accounts.accessIdentityMint),
      getAccountMeta(accounts.accessIdentityAtoken),
      getAccountMeta(accounts.rentTokenMint),
      getAccountMeta(accounts.rentTokenProgram),
      getAccountMeta(accounts.rentTokenSrc),
      getAccountMeta(accounts.rentTokenEscrow),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.ataProgram),
    ],
    programAddress,
    data: getRentDeviceInstructionDataEncoder().encode(
      args as RentDeviceInstructionDataArgs
    ),
  } as RentDeviceInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountListingInfo,
    TAccountRentalInfo,
    TAccountAppAccount,
    TAccountAppMint,
    TAccountDevice,
    TAccountTenant,
    TAccountAccessIdentityMint,
    TAccountAccessIdentityAtoken,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenSrc,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program,
    TAccountAtaProgram
  >;

  return instruction;
}

export type ParsedRentDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The listing info account */
    listingInfo: TAccountMetas[0];
    /** The PDA of the rental agreement account to create */
    rentalInfo: TAccountMetas[1];
    /** The app account */
    appAccount: TAccountMetas[2];
    /** The template mint account for the app */
    appMint: TAccountMetas[3];
    /** The device account */
    device: TAccountMetas[4];
    /** The tenant account */
    tenant: TAccountMetas[5];
    /** The mint account for the access identity */
    accessIdentityMint: TAccountMetas[6];
    /** The associated token account for the access identity */
    accessIdentityAtoken: TAccountMetas[7];
    /** The rent token */
    rentTokenMint: TAccountMetas[8];
    /** The token program for rent token */
    rentTokenProgram: TAccountMetas[9];
    /** The source account for rent payment */
    rentTokenSrc: TAccountMetas[10];
    /** The destination account for rent payment */
    rentTokenEscrow: TAccountMetas[11];
    /** The account paying for the storage fees */
    payer: TAccountMetas[12];
    /** The system program */
    systemProgram: TAccountMetas[13];
    /** The SPL Token 2022 program */
    token2022Program: TAccountMetas[14];
    /** The associated token program */
    ataProgram: TAccountMetas[15];
  };
  data: RentDeviceInstructionData;
};

export function parseRentDeviceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRentDeviceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listingInfo: getNextAccount(),
      rentalInfo: getNextAccount(),
      appAccount: getNextAccount(),
      appMint: getNextAccount(),
      device: getNextAccount(),
      tenant: getNextAccount(),
      accessIdentityMint: getNextAccount(),
      accessIdentityAtoken: getNextAccount(),
      rentTokenMint: getNextAccount(),
      rentTokenProgram: getNextAccount(),
      rentTokenSrc: getNextAccount(),
      rentTokenEscrow: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      token2022Program: getNextAccount(),
      ataProgram: getNextAccount(),
    },
    data: getRentDeviceInstructionDataDecoder().decode(instruction.data),
  };
}
