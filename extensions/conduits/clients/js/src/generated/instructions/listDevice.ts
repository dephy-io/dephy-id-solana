/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type ListDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo extends string | IAccountMeta<string> = string,
  TAccountAppAccount extends string | IAccountMeta<string> = string,
  TAccountDevice extends string | IAccountMeta<string> = string,
  TAccountDeviceOwner extends string | IAccountMeta<string> = string,
  TAccountDeviceMint extends string | IAccountMeta<string> = string,
  TAccountDeviceAssociatedToken extends string | IAccountMeta<string> = string,
  TAccountRentTokenMint extends string | IAccountMeta<string> = string,
  TAccountRentTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRentTokenEscrow extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountAtaProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListingInfo extends string
        ? WritableAccount<TAccountListingInfo>
        : TAccountListingInfo,
      TAccountAppAccount extends string
        ? ReadonlyAccount<TAccountAppAccount>
        : TAccountAppAccount,
      TAccountDevice extends string
        ? ReadonlyAccount<TAccountDevice>
        : TAccountDevice,
      TAccountDeviceOwner extends string
        ? ReadonlySignerAccount<TAccountDeviceOwner> &
            IAccountSignerMeta<TAccountDeviceOwner>
        : TAccountDeviceOwner,
      TAccountDeviceMint extends string
        ? ReadonlyAccount<TAccountDeviceMint>
        : TAccountDeviceMint,
      TAccountDeviceAssociatedToken extends string
        ? ReadonlyAccount<TAccountDeviceAssociatedToken>
        : TAccountDeviceAssociatedToken,
      TAccountRentTokenMint extends string
        ? ReadonlyAccount<TAccountRentTokenMint>
        : TAccountRentTokenMint,
      TAccountRentTokenProgram extends string
        ? ReadonlyAccount<TAccountRentTokenProgram>
        : TAccountRentTokenProgram,
      TAccountRentTokenEscrow extends string
        ? ReadonlyAccount<TAccountRentTokenEscrow>
        : TAccountRentTokenEscrow,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountAtaProgram extends string
        ? ReadonlyAccount<TAccountAtaProgram>
        : TAccountAtaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ListDeviceInstructionData = {
  discriminator: number;
  minRentalDays: bigint;
  maxRentalDays: bigint;
  rentPerDay: bigint;
};

export type ListDeviceInstructionDataArgs = {
  minRentalDays: number | bigint;
  maxRentalDays: number | bigint;
  rentPerDay: number | bigint;
};

export function getListDeviceInstructionDataEncoder(): Encoder<ListDeviceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['minRentalDays', getU64Encoder()],
      ['maxRentalDays', getU64Encoder()],
      ['rentPerDay', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getListDeviceInstructionDataDecoder(): Decoder<ListDeviceInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['minRentalDays', getU64Decoder()],
    ['maxRentalDays', getU64Decoder()],
    ['rentPerDay', getU64Decoder()],
  ]);
}

export function getListDeviceInstructionDataCodec(): Codec<
  ListDeviceInstructionDataArgs,
  ListDeviceInstructionData
> {
  return combineCodec(
    getListDeviceInstructionDataEncoder(),
    getListDeviceInstructionDataDecoder()
  );
}

export type ListDeviceInput<
  TAccountListingInfo extends string = string,
  TAccountAppAccount extends string = string,
  TAccountDevice extends string = string,
  TAccountDeviceOwner extends string = string,
  TAccountDeviceMint extends string = string,
  TAccountDeviceAssociatedToken extends string = string,
  TAccountRentTokenMint extends string = string,
  TAccountRentTokenProgram extends string = string,
  TAccountRentTokenEscrow extends string = string,
  TAccountPayer extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountAtaProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The PDA of the listing info account to create */
  listingInfo: Address<TAccountListingInfo>;
  /** The app account */
  appAccount: Address<TAccountAppAccount>;
  /** The device account */
  device: Address<TAccountDevice>;
  /** The device owner */
  deviceOwner: TransactionSigner<TAccountDeviceOwner>;
  /** The mint account for the device */
  deviceMint: Address<TAccountDeviceMint>;
  /** DID associated token owned by authority */
  deviceAssociatedToken: Address<TAccountDeviceAssociatedToken>;
  /** The token mint used for rent payments */
  rentTokenMint: Address<TAccountRentTokenMint>;
  /** The token program for rent token */
  rentTokenProgram: Address<TAccountRentTokenProgram>;
  /** The destination account for rent token */
  rentTokenEscrow: Address<TAccountRentTokenEscrow>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The SPL Token 2022 program */
  token2022Program: Address<TAccountToken2022Program>;
  /** The associated token program */
  ataProgram?: Address<TAccountAtaProgram>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  minRentalDays: ListDeviceInstructionDataArgs['minRentalDays'];
  maxRentalDays: ListDeviceInstructionDataArgs['maxRentalDays'];
  rentPerDay: ListDeviceInstructionDataArgs['rentPerDay'];
};

export function getListDeviceInstruction<
  TAccountListingInfo extends string,
  TAccountAppAccount extends string,
  TAccountDevice extends string,
  TAccountDeviceOwner extends string,
  TAccountDeviceMint extends string,
  TAccountDeviceAssociatedToken extends string,
  TAccountRentTokenMint extends string,
  TAccountRentTokenProgram extends string,
  TAccountRentTokenEscrow extends string,
  TAccountPayer extends string,
  TAccountToken2022Program extends string,
  TAccountAtaProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: ListDeviceInput<
    TAccountListingInfo,
    TAccountAppAccount,
    TAccountDevice,
    TAccountDeviceOwner,
    TAccountDeviceMint,
    TAccountDeviceAssociatedToken,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountToken2022Program,
    TAccountAtaProgram,
    TAccountSystemProgram
  >
): ListDeviceInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountListingInfo,
  TAccountAppAccount,
  TAccountDevice,
  TAccountDeviceOwner,
  TAccountDeviceMint,
  TAccountDeviceAssociatedToken,
  TAccountRentTokenMint,
  TAccountRentTokenProgram,
  TAccountRentTokenEscrow,
  TAccountPayer,
  TAccountToken2022Program,
  TAccountAtaProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    listingInfo: { value: input.listingInfo ?? null, isWritable: true },
    appAccount: { value: input.appAccount ?? null, isWritable: false },
    device: { value: input.device ?? null, isWritable: false },
    deviceOwner: { value: input.deviceOwner ?? null, isWritable: false },
    deviceMint: { value: input.deviceMint ?? null, isWritable: false },
    deviceAssociatedToken: {
      value: input.deviceAssociatedToken ?? null,
      isWritable: false,
    },
    rentTokenMint: { value: input.rentTokenMint ?? null, isWritable: false },
    rentTokenProgram: {
      value: input.rentTokenProgram ?? null,
      isWritable: false,
    },
    rentTokenEscrow: {
      value: input.rentTokenEscrow ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    ataProgram: { value: input.ataProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.ataProgram.value) {
    accounts.ataProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.listingInfo),
      getAccountMeta(accounts.appAccount),
      getAccountMeta(accounts.device),
      getAccountMeta(accounts.deviceOwner),
      getAccountMeta(accounts.deviceMint),
      getAccountMeta(accounts.deviceAssociatedToken),
      getAccountMeta(accounts.rentTokenMint),
      getAccountMeta(accounts.rentTokenProgram),
      getAccountMeta(accounts.rentTokenEscrow),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.ataProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getListDeviceInstructionDataEncoder().encode(
      args as ListDeviceInstructionDataArgs
    ),
  } as ListDeviceInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountListingInfo,
    TAccountAppAccount,
    TAccountDevice,
    TAccountDeviceOwner,
    TAccountDeviceMint,
    TAccountDeviceAssociatedToken,
    TAccountRentTokenMint,
    TAccountRentTokenProgram,
    TAccountRentTokenEscrow,
    TAccountPayer,
    TAccountToken2022Program,
    TAccountAtaProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedListDeviceInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The PDA of the listing info account to create */
    listingInfo: TAccountMetas[0];
    /** The app account */
    appAccount: TAccountMetas[1];
    /** The device account */
    device: TAccountMetas[2];
    /** The device owner */
    deviceOwner: TAccountMetas[3];
    /** The mint account for the device */
    deviceMint: TAccountMetas[4];
    /** DID associated token owned by authority */
    deviceAssociatedToken: TAccountMetas[5];
    /** The token mint used for rent payments */
    rentTokenMint: TAccountMetas[6];
    /** The token program for rent token */
    rentTokenProgram: TAccountMetas[7];
    /** The destination account for rent token */
    rentTokenEscrow: TAccountMetas[8];
    /** The account paying for the storage fees */
    payer: TAccountMetas[9];
    /** The SPL Token 2022 program */
    token2022Program: TAccountMetas[10];
    /** The associated token program */
    ataProgram: TAccountMetas[11];
    /** The system program */
    systemProgram: TAccountMetas[12];
  };
  data: ListDeviceInstructionData;
};

export function parseListDeviceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedListDeviceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listingInfo: getNextAccount(),
      appAccount: getNextAccount(),
      device: getNextAccount(),
      deviceOwner: getNextAccount(),
      deviceMint: getNextAccount(),
      deviceAssociatedToken: getNextAccount(),
      rentTokenMint: getNextAccount(),
      rentTokenProgram: getNextAccount(),
      rentTokenEscrow: getNextAccount(),
      payer: getNextAccount(),
      token2022Program: getNextAccount(),
      ataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getListDeviceInstructionDataDecoder().decode(instruction.data),
  };
}
