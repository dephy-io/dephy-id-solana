/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { CONDUITS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type EndLeaseInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountRentalInfo extends string | IAccountMeta<string> = string,
  TAccountListingInfo extends string | IAccountMeta<string> = string,
  TAccountTenant extends string | IAccountMeta<string> = string,
  TAccountAccessIdentityMint extends string | IAccountMeta<string> = string,
  TAccountAccessIdentityAtoken extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRentalInfo extends string
        ? WritableAccount<TAccountRentalInfo>
        : TAccountRentalInfo,
      TAccountListingInfo extends string
        ? WritableAccount<TAccountListingInfo>
        : TAccountListingInfo,
      TAccountTenant extends string
        ? WritableAccount<TAccountTenant>
        : TAccountTenant,
      TAccountAccessIdentityMint extends string
        ? WritableAccount<TAccountAccessIdentityMint>
        : TAccountAccessIdentityMint,
      TAccountAccessIdentityAtoken extends string
        ? WritableAccount<TAccountAccessIdentityAtoken>
        : TAccountAccessIdentityAtoken,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      ...TRemainingAccounts,
    ]
  >;

export type EndLeaseInstructionData = { discriminator: number };

export type EndLeaseInstructionDataArgs = {};

export function getEndLeaseInstructionDataEncoder(): Encoder<EndLeaseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 6 })
  );
}

export function getEndLeaseInstructionDataDecoder(): Decoder<EndLeaseInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getEndLeaseInstructionDataCodec(): Codec<
  EndLeaseInstructionDataArgs,
  EndLeaseInstructionData
> {
  return combineCodec(
    getEndLeaseInstructionDataEncoder(),
    getEndLeaseInstructionDataDecoder()
  );
}

export type EndLeaseInput<
  TAccountRentalInfo extends string = string,
  TAccountListingInfo extends string = string,
  TAccountTenant extends string = string,
  TAccountAccessIdentityMint extends string = string,
  TAccountAccessIdentityAtoken extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountToken2022Program extends string = string,
> = {
  /** The rental info account */
  rentalInfo: Address<TAccountRentalInfo>;
  /** The listing info account */
  listingInfo: Address<TAccountListingInfo>;
  /** The tenant account */
  tenant: Address<TAccountTenant>;
  /** The mint account for the access identity */
  accessIdentityMint: Address<TAccountAccessIdentityMint>;
  /** The associated token account for the access identity */
  accessIdentityAtoken: Address<TAccountAccessIdentityAtoken>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The SPL Token 2022 program */
  token2022Program: Address<TAccountToken2022Program>;
};

export function getEndLeaseInstruction<
  TAccountRentalInfo extends string,
  TAccountListingInfo extends string,
  TAccountTenant extends string,
  TAccountAccessIdentityMint extends string,
  TAccountAccessIdentityAtoken extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountToken2022Program extends string,
>(
  input: EndLeaseInput<
    TAccountRentalInfo,
    TAccountListingInfo,
    TAccountTenant,
    TAccountAccessIdentityMint,
    TAccountAccessIdentityAtoken,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program
  >
): EndLeaseInstruction<
  typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountRentalInfo,
  TAccountListingInfo,
  TAccountTenant,
  TAccountAccessIdentityMint,
  TAccountAccessIdentityAtoken,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountToken2022Program
> {
  // Program address.
  const programAddress = CONDUITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rentalInfo: { value: input.rentalInfo ?? null, isWritable: true },
    listingInfo: { value: input.listingInfo ?? null, isWritable: true },
    tenant: { value: input.tenant ?? null, isWritable: true },
    accessIdentityMint: {
      value: input.accessIdentityMint ?? null,
      isWritable: true,
    },
    accessIdentityAtoken: {
      value: input.accessIdentityAtoken ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rentalInfo),
      getAccountMeta(accounts.listingInfo),
      getAccountMeta(accounts.tenant),
      getAccountMeta(accounts.accessIdentityMint),
      getAccountMeta(accounts.accessIdentityAtoken),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.token2022Program),
    ],
    programAddress,
    data: getEndLeaseInstructionDataEncoder().encode({}),
  } as EndLeaseInstruction<
    typeof CONDUITS_PROGRAM_ADDRESS,
    TAccountRentalInfo,
    TAccountListingInfo,
    TAccountTenant,
    TAccountAccessIdentityMint,
    TAccountAccessIdentityAtoken,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountToken2022Program
  >;

  return instruction;
}

export type ParsedEndLeaseInstruction<
  TProgram extends string = typeof CONDUITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The rental info account */
    rentalInfo: TAccountMetas[0];
    /** The listing info account */
    listingInfo: TAccountMetas[1];
    /** The tenant account */
    tenant: TAccountMetas[2];
    /** The mint account for the access identity */
    accessIdentityMint: TAccountMetas[3];
    /** The associated token account for the access identity */
    accessIdentityAtoken: TAccountMetas[4];
    /** The account paying for the storage fees */
    payer: TAccountMetas[5];
    /** The system program */
    systemProgram: TAccountMetas[6];
    /** The SPL Token 2022 program */
    token2022Program: TAccountMetas[7];
  };
  data: EndLeaseInstructionData;
};

export function parseEndLeaseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEndLeaseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rentalInfo: getNextAccount(),
      listingInfo: getNextAccount(),
      tenant: getNextAccount(),
      accessIdentityMint: getNextAccount(),
      accessIdentityAtoken: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      token2022Program: getNextAccount(),
    },
    data: getEndLeaseInstructionDataDecoder().decode(instruction.data),
  };
}
